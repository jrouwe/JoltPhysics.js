// SPDX-FileCopyrightText: 2022 Jorrit Rouwe
// SPDX-License-Identifier: MIT

interface JPHString {
	[Const] DOMString c_str(); // TODO: This is not a nice way to get a string from an interface
	unsigned long size();
};

interface ArrayVec3 {
	long size();
	[Ref] Vec3 at(long inIndex);
	void push_back([Const, Ref] Vec3 inValue);
	void reserve(unsigned long inSize);
	void resize(unsigned long inSize);
};

enum Layers {
	"Layers::MOVING",
	"Layers::NON_MOVING"
};

enum EMotionType {
	"EMotionType::Static",
	"EMotionType::Kinematic",
	"EMotionType::Dynamic"
};

enum EMotionQuality {
	"EMotionQuality::Discrete",
	"EMotionQuality::LinearCast"
};

enum EActivation {
	"EActivation::Activate",
	"EActivation::DontActivate"
};

enum EShapeType {
	"EShapeType::Convex",
	"EShapeType::Compound",
	"EShapeType::Decorated",
	"EShapeType::Mesh",
	"EShapeType::HeightField"
};

enum EShapeSubType {
	"EShapeSubType::Sphere",
	"EShapeSubType::Box",
	"EShapeSubType::Capsule",
	"EShapeSubType::TaperedCapsule",
	"EShapeSubType::Cylinder",
	"EShapeSubType::ConvexHull",
	"EShapeSubType::StaticCompound",
	"EShapeSubType::MutableCompound",
	"EShapeSubType::RotatedTranslated",
	"EShapeSubType::Scaled",
	"EShapeSubType::OffsetCenterOfMass",
	"EShapeSubType::Mesh",
	"EShapeSubType::HeightField"
};

enum EConstraintSpace {
	"EConstraintSpace::LocalToBodyCOM",
	"EConstraintSpace::WorldSpace"
};

[Prefix="JPH::"]
interface Vec3 {
	void Vec3();
	void Vec3(float inX, float inY, float inZ);
	[Value] static Vec3 sZero();
	[Value] static Vec3 sAxisX();
	[Value] static Vec3 sAxisY();
	[Value] static Vec3 sAxisZ();
	[Operator="[]"] float GetComponent(unsigned long inCoordinate);
	float Length();
	[Value] Vec3 Normalized();
	[Value] Vec3 GetNormalizedPerpendicular();
	float GetX();
	float GetY();
	float GetZ();
	void SetX(float inX);
	void SetY(float inY);
	void SetZ(float inZ);
	void SetComponent(unsigned long inCoordinate, float inValue);
};

[Prefix="JPH::"]
interface Quat {
	void Quat();
	void Quat(float inX, float inY, float inZ, float inW);
	[Value] static Quat sIdentity();
	[Value] static Quat sRotation([Const, Ref] Vec3 inRotation, float inAngle);
	float Length();
	[Value] Quat Normalized();
	float GetX();
	float GetY();
	float GetZ();
	float GetW();
};

[Prefix="JPH::"]
interface Float3 {
	void Float3(float inX, float inY, float inZ);	

	attribute float x;
	attribute float y;
	attribute float z;
};

[Prefix="JPH::"]
interface Mat44 {
	[Value] static Mat44 sIdentity();
	[Value] static Mat44 sRotationTranslation([Const, Ref] Quat inRotation, [Const, Ref] Vec3 inTranslation);
	[Value] Vec3 GetAxisX();
	[Value] Vec3 GetAxisY();
	[Value] Vec3 GetAxisZ();
	[Value] Mat44 GetRotation();
	[Value] Quat GetQuaternion();
	[Value] Vec3 GetTranslation();
};

[Prefix="JPH::"]
interface AABox {
	void AABox([Const, Ref] Vec3 inMin, [Const, Ref] Vec3 inMax);	
	[Value] static AABox sBiggest();
	
	[Value] attribute Vec3 mMin;
	[Value] attribute Vec3 mMax;
};

[Prefix="JPH::"]
interface PhysicsMaterial {
	void PhysicsMaterial();
};

[Prefix="JPH::"]
interface PhysicsMaterialList {
	void PhysicsMaterialList();
	[Const] PhysicsMaterial at(long inIndex);
	void push_back([Const] PhysicsMaterial inMaterial);
	void reserve(unsigned long inSize);
	void resize(unsigned long inSize);
};

[Prefix="JPH::"]
interface Triangle {
	void Triangle();
	void Triangle([Const, Ref] Vec3 inV1, [Const, Ref] Vec3 inV2, [Const, Ref] Vec3 inV3);

	[Value] attribute Float3[] mV;
	attribute unsigned long mMaterialIndex;
};

[Prefix="JPH::"]
interface TriangleList {
	void TriangleList();
	[Ref] Triangle at(long inIndex);
	void push_back([Const, Ref] Triangle inTriangle);
	void reserve(unsigned long inSize);
	void resize(unsigned long inSize);
};

[Prefix="JPH::"]
interface VertexList {
	void VertexList();
	[Ref] Float3 at(long inIndex);
	void push_back([Const, Ref] Float3 inVertex);
	void reserve(unsigned long inSize);
	void resize(unsigned long inSize);
};

[Prefix="JPH::"]
interface IndexedTriangle {
	void IndexedTriangle();
	void IndexedTriangle(unsigned long inI1, unsigned long inI2, unsigned long inI3, unsigned long inMaterialIndex);

	attribute unsigned long[] mIdx;
	attribute unsigned long mMaterialIndex;
};

[Prefix="JPH::"]
interface IndexedTriangleList {
	void IndexedTriangleList();
	[Ref] IndexedTriangle at(long inIndex);
	void push_back([Const, Ref] IndexedTriangle inTriangle);
	void reserve(unsigned long inSize);
	void resize(unsigned long inSize);
};

[Prefix="JPH::Shape::"]
interface ShapeResult {
	boolean IsValid();
	boolean HasError();
	[Const, Ref] JPHString GetError();
	Shape Get();
};

// Shape
[Prefix="JPH::"]
interface ShapeSettings {
	[Value] ShapeResult Create();

	attribute unsigned long long mUserData;
};

[Prefix="JPH::"]
interface Shape {
	EShapeType GetType();
	EShapeSubType GetSubType();
	boolean MustBeStatic();
	[Value] AABox GetLocalBounds();
	[Value] AABox GetWorldSpaceBounds([Const, Ref] Mat44 inCenterOfMassTransform, [Const, Ref] Vec3 inScale);
	[Value] Vec3 GetCenterOfMass();
	long long GetUserData();
	void SetUserData(long long inUserData);
};

interface ShapeGetTriangles
{
	void ShapeGetTriangles(Shape inShape, [Const, Ref] AABox inBox, [Const, Ref] Vec3 inPositionCOM, [Const, Ref] Quat inRotation, [Const, Ref] Vec3 inScale);
	long GetNumTriangles();
	long GetVerticesSize();
	[Const] any GetVerticesData();
	[Const] PhysicsMaterial GetMaterial(long inTriangle);
};

// Convex shape
[Prefix="JPH::"]
interface ConvexShapeSettings {
	[Const] attribute PhysicsMaterial mMaterial;
	attribute float mDensity;
};

ConvexShapeSettings implements ShapeSettings;

[Prefix="JPH::"]
interface ConvexShape {
	float GetDensity();
	void SetDensity(float inDensity);
};

ConvexShape implements Shape;

// Sphere
[Prefix="JPH::"]
interface SphereShapeSettings {
	void SphereShapeSettings(float inRadius, [Const] PhysicsMaterial inMaterial);

	attribute float mRadius;
};

SphereShapeSettings implements ConvexShapeSettings;

[Prefix="JPH::"]
interface SphereShape {
	void SphereShape(float inRadius, [Const] PhysicsMaterial inMaterial);
};

SphereShape implements ConvexShape;

// Box
[Prefix="JPH::"]
interface BoxShapeSettings {
	void BoxShapeSettings([Ref] Vec3 inHalfExtent, float inConvexRadius, [Const] PhysicsMaterial inMaterial);

	[Value] attribute Vec3 mHalfExtent;
	attribute float mConvexRadius;
};

BoxShapeSettings implements ConvexShapeSettings;

[Prefix="JPH::"]
interface BoxShape {
	void BoxShape([Ref] Vec3 inHalfExtent, float inConvexRadius, [Const] PhysicsMaterial inMaterial);
};

BoxShape implements ConvexShape;

// Cylinder
[Prefix="JPH::"]
interface CylinderShapeSettings {
	void CylinderShapeSettings(float inHalfHeight, float inRadius, float inConvexRadius, [Const] PhysicsMaterial inMaterial);

	attribute float mHalfHeight;
	attribute float mRadius;
	attribute float mConvexRadius;
};

CylinderShapeSettings implements ConvexShapeSettings;

[Prefix="JPH::"]
interface CylinderShape {
	void CylinderShape(float inHalfHeight, float inRadius, float inConvexRadius, [Const] PhysicsMaterial inMaterial);
};

CylinderShape implements ConvexShape;

// Capsule
[Prefix="JPH::"]
interface CapsuleShapeSettings {
	void CapsuleShapeSettings(float inHalfHeight, float inRadius, PhysicsMaterial inMaterial);

	attribute float mRadius;
	attribute float mHalfHeightOfCylinder;
};

CapsuleShapeSettings implements ConvexShapeSettings;

[Prefix="JPH::"]
interface CapsuleShape {
	void CapsuleShape(float inHalfHeight, float inRadius, PhysicsMaterial inMaterial);
};

CapsuleShape implements ConvexShape;

// Tapered capsule
[Prefix="JPH::"]
interface TaperedCapsuleShapeSettings {
	void TaperedCapsuleShapeSettings(float inHalfHeightOfTaperedCylinder, float inTopRadius, float inBottomRadius, [Const] PhysicsMaterial inMaterial);

	attribute float mHalfHeightOfTaperedCylinder;
	attribute float mTopRadius;
	attribute float mBottomRadius;
};

TaperedCapsuleShapeSettings implements ConvexShapeSettings;

[Prefix="JPH::"]
interface TaperedCapsuleShape {
};

TaperedCapsuleShape implements ConvexShape;

// Convex hull
[Prefix="JPH::"]
interface ConvexHullShapeSettings {
	void ConvexHullShapeSettings();
	
	[Value] attribute ArrayVec3 mPoints;
	attribute float mMaxConvexRadius;
	attribute float mMaxErrorConvexRadius;
	attribute float mHullTolerance;
};

ConvexHullShapeSettings implements ConvexShapeSettings;

[Prefix="JPH::"]
interface ConvexHullShape {
};

ConvexHullShape implements ConvexShape;

// Static compound
[Prefix="JPH::"]
interface StaticCompoundShapeSettings {
	void StaticCompoundShapeSettings();
	void AddShape([Const, Ref] Vec3 inPosition, [Const, Ref] Quat inRotation, [Const] ShapeSettings inShape, unsigned long inUserData);
};

StaticCompoundShapeSettings implements ShapeSettings;

[Prefix="JPH::"]
interface StaticCompoundShape {
};

StaticCompoundShape implements Shape;

// Scaled shape
[Prefix="JPH::"]
interface ScaledShapeSettings {
	void ScaledShapeSettings(ShapeSettings inShape, [Ref, Const] Vec3 inScale);
	
	[Value] attribute Vec3 mScale;
};

ScaledShapeSettings implements ShapeSettings;

[Prefix="JPH::"]
interface ScaledShape {
	void ScaledShape(Shape inShape, [Ref, Const] Vec3 inScale);
};

ScaledShape implements Shape;

// Offset COM
[Prefix="JPH::"]
interface OffsetCenterOfMassShapeSettings {
	void OffsetCenterOfMassShapeSettings([Ref, Const] Vec3 inOffset, ShapeSettings inShape);
	
	[Value] attribute Vec3 mOffset;
};

OffsetCenterOfMassShapeSettings implements ShapeSettings;

[Prefix="JPH::"]
interface OffsetCenterOfMassShape {
};

OffsetCenterOfMassShape implements Shape;

// Rotated translated
[Prefix="JPH::"]
interface RotatedTranslatedShapeSettings {
	void RotatedTranslatedShapeSettings([Ref, Const] Vec3 inPosition, [Ref, Const] Quat inRotation, ShapeSettings inShape);
	
	[Value] attribute Vec3 mPosition;
	[Value] attribute Quat mRotation;
};

RotatedTranslatedShapeSettings implements ShapeSettings;

[Prefix="JPH::"]
interface RotatedTranslatedShape {
};

RotatedTranslatedShape implements Shape;

// Mesh shape
[Prefix="JPH::"]
interface MeshShapeSettings {
	void MeshShapeSettings([Ref, Const] TriangleList inTriangleList, [Ref, Const] PhysicsMaterialList inMaterialList);
	void MeshShapeSettings([Ref, Const] VertexList inVertices, [Ref, Const] IndexedTriangleList inTriangles, [Ref, Const] PhysicsMaterialList inMaterialList);	
};

MeshShapeSettings implements ShapeSettings;

[Prefix="JPH::"]
interface MeshShape {
};

MeshShape implements Shape;

// Constraint
[Prefix="JPH::"]
interface ConstraintSettings {
	attribute boolean mEnabled;
	attribute long mNumVelocityStepsOverride;
	attribute long mNumPositionStepsOverride;
};

[Prefix="JPH::"]
interface Constraint {
	void SetEnabled(boolean inEnabled);
	boolean GetEnabled();
};

// Two body constraint
[Prefix="JPH::"]
interface TwoBodyConstraintSettings {
	Constraint Create([Ref] Body inBody1, [Ref] Body inBody2);
};

TwoBodyConstraintSettings implements ConstraintSettings;

[Prefix="JPH::"]
interface TwoBodyConstraint {
	Body GetBody1();
	Body GetBody2();
};

TwoBodyConstraint implements Constraint;

// Fixed constraint
[Prefix="JPH::"]
interface FixedConstraintSettings {
	void FixedConstraintSettings();
	
	attribute EConstraintSpace mSpace;
	attribute boolean mAutoDetectPoint;
	[Value] attribute Vec3 mPoint1;
	[Value] attribute Vec3 mAxisX1;
	[Value] attribute Vec3 mAxisY1;
	[Value] attribute Vec3 mPoint2;
	[Value] attribute Vec3 mAxisX2;
	[Value] attribute Vec3 mAxisY2;
};

FixedConstraintSettings implements TwoBodyConstraintSettings;

// Distance constraint
[Prefix="JPH::"]
interface DistanceConstraintSettings {
	void DistanceConstraintSettings();
	
	attribute EConstraintSpace mSpace;
	[Value] attribute Vec3 mPoint1;
	[Value] attribute Vec3 mPoint2;
	attribute float mMinDistance;
	attribute float mMaxDistance;
	attribute float mFrequency;
	attribute float mDamping;
};

DistanceConstraintSettings implements TwoBodyConstraintSettings;

// Point constraint
[Prefix="JPH::"]
interface PointConstraintSettings {
	void PointConstraintSettings();
	
	attribute EConstraintSpace mSpace;
	[Value] attribute Vec3 mPoint1;
	[Value] attribute Vec3 mPoint2;
};

PointConstraintSettings implements TwoBodyConstraintSettings;

// Hinge constraint
[Prefix="JPH::"]
interface HingeConstraintSettings {
	void HingeConstraintSettings();
	
	attribute EConstraintSpace mSpace;
	[Value] attribute Vec3 mPoint1;
	[Value] attribute Vec3 mHingeAxis1;
	[Value] attribute Vec3 mNormalAxis1;
	[Value] attribute Vec3 mPoint2;
	[Value] attribute Vec3 mHingeAxis2;
	[Value] attribute Vec3 mNormalAxis2;
	attribute float mLimitsMin;
	attribute float mLimitsMax;
	attribute float mMaxFrictionTorque;
};

HingeConstraintSettings implements TwoBodyConstraintSettings;

// Cone constraint
[Prefix="JPH::"]
interface ConeConstraintSettings {
	void ConeConstraintSettings();
	
	attribute EConstraintSpace mSpace;
	[Value] attribute Vec3 mPoint1;
	[Value] attribute Vec3 mTwistAxis1;
	[Value] attribute Vec3 mPoint2;
	[Value] attribute Vec3 mTwistAxis2;
	attribute float mHalfConeAngle;
};

ConeConstraintSettings implements TwoBodyConstraintSettings;

// Slider constraint
[Prefix="JPH::"]
interface SliderConstraintSettings {
	void SliderConstraintSettings();
	
	attribute EConstraintSpace mSpace;
	attribute boolean mAutoDetectPoint;
	[Value] attribute Vec3 mPoint1;
	[Value] attribute Vec3 mSliderAxis1;
	[Value] attribute Vec3 mNormalAxis1;
	[Value] attribute Vec3 mPoint2;
	[Value] attribute Vec3 mSliderAxis2;
	[Value] attribute Vec3 mNormalAxis2;
	attribute float mLimitsMin;
	attribute float mLimitsMax;
	attribute float mMaxFrictionForce;
};

SliderConstraintSettings implements TwoBodyConstraintSettings;

// Swing twist constraint
[Prefix="JPH::"]
interface SwingTwistConstraintSettings {
	void SwingTwistConstraintSettings();
	
	attribute EConstraintSpace mSpace;
	[Value] attribute Vec3 mPosition1;
	[Value] attribute Vec3 mTwistAxis1;
	[Value] attribute Vec3 mPlaneAxis1;
	[Value] attribute Vec3 mPosition2;
	[Value] attribute Vec3 mTwistAxis2;
	[Value] attribute Vec3 mPlaneAxis2;
	attribute float mNormalHalfConeAngle;
	attribute float mPlaneHalfConeAngle;
	attribute float mTwistMinAngle;
	attribute float mTwistMaxAngle;
	attribute float mMaxFrictionTorque;
};

SwingTwistConstraintSettings implements TwoBodyConstraintSettings;

[Prefix="JPH::"]
interface BodyID {
	void BodyID();
	void BodyID([Const, Ref] BodyID inID);
	unsigned long GetIndex();
	unsigned long GetIndexAndSequenceNumber();
};

[Prefix="JPH::"]
interface MotionProperties {
	EMotionQuality GetMotionQuality();
	void SetMotionQuality(EMotionQuality inQuality);
	[Value] Vec3 GetLinearVelocity();
	void SetLinearVelocity([Const, Ref] Vec3 inVelocity);
	void SetLinearVelocityClamped([Const, Ref] Vec3 inVelocity);
	[Value] Vec3 GetAngularVelocity();
	void SetAngularVelocity([Const, Ref] Vec3 inVelocity);
	void SetAngularVelocityClamped([Const, Ref] Vec3 inVelocity);
	void MoveKinematic([Const, Ref] Vec3 inPosition, [Const, Ref] Quat inRotation, float inDeltaTime);
	float GetMaxLinearVelocity();
	void SetMaxLinearVelocity(float inVelocity);
	float GetMaxAngularVelocity();
	void SetMaxAngularVelocity(float inVelocity);
	float GetLinearDamping();
	void SetLinearDamping(float inDamping);	
	float GetAngularDamping();
	void SetAngularDamping(float inDamping);
	float GetInverseMass();
	void SetInverseMass(float inInvM);
	[Value] Vec3 GetInverseInertiaDiagonal();
	[Value] Quat GetInertiaRotation();
	void SetInverseInertia([Const, Ref] Vec3 inInvI, [Const, Ref] Quat inRotation);
};

[Prefix="JPH::"]
interface GroupFilter {
};

[Prefix="JPH::"]
interface GroupFilterTable {
	void GroupFilterTable(unsigned long inNumGroups);
	void DisableCollision(unsigned long inSubGroup1, unsigned long inSubGroup2);
	void EnableCollision(unsigned long inSubGroup1, unsigned long inSubGroup2);
	boolean IsCollisionEnabled(unsigned long inSubGroup1, unsigned long inSubGroup2);
};

GroupFilterTable implements GroupFilter;

[Prefix="JPH::"]
interface CollisionGroup {
	void CollisionGroup();
	void CollisionGroup(GroupFilter inFilter, unsigned long inGroupID, unsigned long inSubGroupID);
	void SetGroupFilter(GroupFilter inFilter);
	[Const] GroupFilter GetGroupFilter();
	void SetGroupID(unsigned long inGroupID);
	unsigned long GetGroupID();
	void SetSubGroupID(unsigned long inSubGroupID);
	void GetSubGroupID();
};

[Prefix="JPH::"]
interface Body {
	[Value] BodyID GetID();
	boolean IsActive();
	boolean IsStatic();
	boolean IsKinematic();
	boolean IsDynamic();
	boolean CanBeKinematicOrDynamic();
	EMotionType GetMotionType();
	void SetMotionType(EMotionType inMotionType);
	void SetIsSensor(boolean inIsSensor);
	boolean IsSensor();
	unsigned long GetObjectLayer();
	[Ref] CollisionGroup GetCollisionGroup();
	boolean GetAllowSleeping();
	void SetAllowSleeping(boolean inAllow);
	float GetFriction();
	void SetFriction(float inFriction);
	float GetRestitution();
	void SetRestitution(float inRestitution);
	[Value] Vec3 GetLinearVelocity();
	void SetLinearVelocity([Const, Ref] Vec3 inVelocity);
	void SetLinearVelocityClamped([Const, Ref] Vec3 inVelocity);
	[Value] Vec3 GetAngularVelocity();
	void SetAngularVelocity([Const, Ref] Vec3 inVelocity);
	void SetAngularVelocityClamped([Const, Ref] Vec3 inVelocity);
	void AddForce([Const, Ref] Vec3 inForce);
	void AddForce([Const, Ref] Vec3 inForce, [Const, Ref] Vec3 inPosition);
	void AddTorque([Const, Ref] Vec3 inTorque);
	void AddImpulse([Const, Ref] Vec3 inImpulse);
	void AddImpulse([Const, Ref] Vec3 inImpulse, [Const, Ref] Vec3 inPosition);
	void MoveKinematic([Const, Ref] Vec3 inPosition, [Const, Ref] Quat inRotation, float inDeltaTime);
	boolean IsInBroadPhase();
	[Const] Shape GetShape();
	[Value] Vec3 GetPosition();
	[Value] Quat GetRotation();
	[Value] Mat44 GetWorldTransform();
	[Value] Vec3 GetCenterOfMassPosition();
	[Value] Mat44 GetCenterOfMassTransform();
	[Value] AABox GetWorldSpaceBounds();
	MotionProperties GetMotionProperties();
};

[Prefix="JPH::"]
interface BodyInterface {
	Body CreateBody([Const, Ref] BodyCreationSettings inSettings);
	void DestroyBody([Const, Ref] BodyID inBodyID);
	void AddBody([Const, Ref] BodyID inBodyID, EActivation inActivationMode);
	void RemoveBody([Const, Ref] BodyID inBodyID);
	boolean IsAdded([Const, Ref] BodyID inBodyID);
	[Value] BodyID CreateAndAddBody([Const, Ref] BodyCreationSettings inSettings, EActivation inActivationMode);
	[Const] Shape GetShape([Const, Ref] BodyID inBodyID);
	void SetShape([Const, Ref] BodyID inBodyID, [Const] Shape inShape, boolean inUpdateMassProperties, EActivation inActivationMode);
	void SetObjectLayer([Const, Ref] BodyID inBodyID, unsigned long inLayer);
	unsigned long GetObjectLayer([Const, Ref] BodyID inBodyID);
	void SetPositionAndRotation([Const, Ref] BodyID inBodyID, [Const, Ref] Vec3 inPosition, [Const, Ref] Quat inRotation, EActivation inActivationMode);
	void SetPositionAndRotationWhenChanged([Const, Ref] BodyID inBodyID, [Const, Ref] Vec3 inPosition, [Const, Ref] Quat inRotation, EActivation inActivationMode);
	void GetPositionAndRotation([Const, Ref] BodyID inBodyID, [Ref] Vec3 outPosition, [Ref] Quat outRotation);
	void SetPosition([Const, Ref] BodyID inBodyID, [Const, Ref] Vec3 inPosition, EActivation inActivationMode);
	[Value] Vec3 GetPosition([Const, Ref] BodyID inBodyID);
	void SetRotation([Const, Ref] BodyID inBodyID, [Const, Ref] Quat inRotation, EActivation inActivationMode);
	[Value] Quat GetRotation([Const, Ref] BodyID inBodyID);
	void MoveKinematic([Const, Ref] BodyID inBodyID, [Const, Ref] Vec3 inPosition, [Const, Ref] Quat inRotation, float inDeltaTime);
};

[Prefix="JPH::"]
interface PhysicsSystem {
	[Ref] BodyInterface GetBodyInterface();
	void SetGravity([Const, Ref] Vec3 inGravity);
	[Value] Vec3 GetGravity();
	unsigned long GetNumBodies();
	unsigned long GetNumActiveBodies();
	unsigned long GetMaxBodies();
	void AddConstraint(Constraint inConstraint);
	void RemoveConstraint(Constraint inConstraint);
};

[Prefix="JPH::"]
interface BodyCreationSettings {
	void BodyCreationSettings([Const] Shape inShape, [Ref] Vec3 inPosition, [Ref] Quat inRotation, EMotionType inMotionType, unsigned short inObjectLayer);
	
	[Value] attribute Vec3 mPosition;
	[Value] attribute Quat mRotation;
	[Value] attribute Vec3 mLinearVelocity;
	[Value] attribute Vec3 mAngularVelocity;
	attribute long long mUserData;
	attribute short mObjectLayer;
	[Value] attribute CollisionGroup mCollisionGroup;
	attribute EMotionType mMotionType;
	attribute boolean mAllowDynamicOrKinematic;
	attribute boolean mIsSensor;
	attribute EMotionQuality mMotionQuality;
	attribute boolean mAllowSleeping;
	attribute float mFriction;
	attribute float mRestitution;
	attribute float mLinearDamping;
	attribute float mAngularDamping;
	attribute float mMaxLinearVelocity;
	attribute float mMaxAngularVelocity;
	attribute float mGravityFactor;
};

interface JoltInterface {
	void JoltInterface();
	void Step(float inDeltaTime, long inCollisionSteps, long inIntegrationSubSteps);
	PhysicsSystem GetPhysicsSystem();
};
