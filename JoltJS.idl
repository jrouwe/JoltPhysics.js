// SPDX-FileCopyrightText: 2022 Jorrit Rouwe
// SPDX-License-Identifier: MIT

interface JPHString {
	[Const] DOMString c_str(); // TODO: This is not a nice way to get a string from an interface
	unsigned long size();
};

interface ArrayVec3 {
	long size();
	[Ref] Vec3 at(long inIndex);
	void push_back([Const, Ref] Vec3 inValue);
	void reserve(unsigned long inSize);
	void resize(unsigned long inSize);
};

enum Layers {
	"Layers::MOVING",
	"Layers::NON_MOVING"
};

enum EBodyType {
	"EBodyType::RigidBody",
	"EBodyType::SoftBody"
};

enum EMotionType {
	"EMotionType::Static",
	"EMotionType::Kinematic",
	"EMotionType::Dynamic"
};

enum EMotionQuality {
	"EMotionQuality::Discrete",
	"EMotionQuality::LinearCast"
};

enum EActivation {
	"EActivation::Activate",
	"EActivation::DontActivate"
};

enum EShapeType {
	"EShapeType::Convex",
	"EShapeType::Compound",
	"EShapeType::Decorated",
	// Omitting EShapeType::Mesh because of name conflict, use ShapeType instead
	// Omitting EShapeType::HeightField because of name conflict, use ShapeType instead
};

enum ShapeType {
	"ShapeType::EShapeType_Convex",
	"ShapeType::EShapeType_Compound",
	"ShapeType::EShapeType_Decorated",
	"ShapeType::EShapeType_Mesh",
	"ShapeType::EShapeType_HeightField"
};

enum EShapeSubType {
	"EShapeSubType::Sphere",
	"EShapeSubType::Box",
	"EShapeSubType::Capsule",
	"EShapeSubType::TaperedCapsule",
	"EShapeSubType::Cylinder",
	"EShapeSubType::ConvexHull",
	"EShapeSubType::StaticCompound",
	"EShapeSubType::MutableCompound",
	"EShapeSubType::RotatedTranslated",
	"EShapeSubType::Scaled",
	"EShapeSubType::OffsetCenterOfMass",
	// Omitting EShapeSubType::Mesh because of name conflict, use ShapeSubType instead
	// Omitting EShapeSubType::HeightField because of name conflict, use ShapeSubType instead
};

enum ShapeSubType {
	"ShapeSubType::EShapeSubType_Sphere",
	"ShapeSubType::EShapeSubType_Box",
	"ShapeSubType::EShapeSubType_Capsule",
	"ShapeSubType::EShapeSubType_TaperedCapsule",
	"ShapeSubType::EShapeSubType_Cylinder",
	"ShapeSubType::EShapeSubType_ConvexHull",
	"ShapeSubType::EShapeSubType_StaticCompound",
	"ShapeSubType::EShapeSubType_MutableCompound",
	"ShapeSubType::EShapeSubType_RotatedTranslated",
	"ShapeSubType::EShapeSubType_Scaled",
	"ShapeSubType::EShapeSubType_OffsetCenterOfMass",
	"ShapeSubType::EShapeSubType_Mesh",
	"ShapeSubType::EShapeSubType_HeightField"
};

enum EConstraintSpace {
	"EConstraintSpace::LocalToBodyCOM",
	"EConstraintSpace::WorldSpace"
};

enum ESpringMode {
	"ESpringMode::FrequencyAndDamping",
	"ESpringMode::StiffnessAndDamping",
};

enum EOverrideMassProperties {
	"EOverrideMassProperties::CalculateMassAndInertia",
	"EOverrideMassProperties::CalculateInertia",
	"EOverrideMassProperties::MassAndInertiaProvided"
};

enum EAllowedDOFs {
	"EAllowedDOFs::TranslationX",
	"EAllowedDOFs::TranslationY",
	"EAllowedDOFs::TranslationZ",
	"EAllowedDOFs::RotationX",
	"EAllowedDOFs::RotationY",
	"EAllowedDOFs::RotationZ",
	"EAllowedDOFs::Plane2D"
};

enum EStateRecorderState {
	"EStateRecorderState::None",
	"EStateRecorderState::Global",
	"EStateRecorderState::Bodies",
	"EStateRecorderState::Contacts",
	"EStateRecorderState::Constraints",
	"EStateRecorderState::All"
};

enum EBackFaceMode {
	"EBackFaceMode::IgnoreBackFaces",
	"EBackFaceMode::CollideWithBackFaces"
};

enum EGroundState {
	"EGroundState::OnGround",
	"EGroundState::OnSteepGround",
	"EGroundState::NotSupported",
	"EGroundState::InAir"
};

enum ValidateResult {
	"ValidateResult::AcceptAllContactsForThisBodyPair",
	"ValidateResult::AcceptContact",
	"ValidateResult::RejectContact",
	"ValidateResult::RejectAllContactsForThisBodyPair"
};

[Prefix="JPH::"]
interface Vec3 {
	void Vec3();
	void Vec3(float inX, float inY, float inZ);
	[Value] static Vec3 sZero();
	[Value] static Vec3 sAxisX();
	[Value] static Vec3 sAxisY();
	[Value] static Vec3 sAxisZ();
	[Operator="[]"] float GetComponent(unsigned long inCoordinate);
	float Length();
	[Value] Vec3 Normalized();
	[Value] Vec3 GetNormalizedPerpendicular();
	float GetX();
	float GetY();
	float GetZ();
	void SetX(float inX);
	void SetY(float inY);
	void SetZ(float inZ);
	void SetComponent(unsigned long inCoordinate, float inValue);
	boolean IsNearZero(optional float inMaxDistSq);
};

[Prefix="JPH::"]
interface Quat {
	void Quat();
	void Quat(float inX, float inY, float inZ, float inW);
	[Value] static Quat sIdentity();
	[Value] static Quat sRotation([Const, Ref] Vec3 inRotation, float inAngle);
	float Length();
	[Value] Quat Normalized();
	[Value] static Quat sEulerAngles([Const, Ref] Vec3 inInput);
	float GetX();
	float GetY();
	float GetZ();
	float GetW();
	[Const, Value] Vec3 RotateAxisX();
	[Const, Value] Vec3 RotateAxisY();
	[Const, Value] Vec3 RotateAxisZ();
};

[Prefix="JPH::"]
interface Float3 {
	void Float3(float inX, float inY, float inZ);	

	attribute float x;
	attribute float y;
	attribute float z;
};

[Prefix="JPH::"]
interface Mat44 {
	[Value] static Mat44 sIdentity();
	[Value] static Mat44 sRotationTranslation([Const, Ref] Quat inRotation, [Const, Ref] Vec3 inTranslation);
	[Value] Vec3 GetAxisX();
	[Value] Vec3 GetAxisY();
	[Value] Vec3 GetAxisZ();
	[Value] Mat44 GetRotation();
	[Value] Quat GetQuaternion();
	[Value] Vec3 GetTranslation();
};

[Prefix="JPH::"]
interface AABox {
	void AABox([Const, Ref] Vec3 inMin, [Const, Ref] Vec3 inMax);	
	[Value] static AABox sBiggest();
	
	[Value] attribute Vec3 mMin;
	[Value] attribute Vec3 mMax;
};

[Prefix="JPH::"]
interface Plane {
	void Plane([Const, Ref] Vec3 inNormal, float inConstant);	

	[Value] Vec3 GetNormal();
	void SetNormal([Const, Ref] Vec3 inNormal);
	float GetConstant();
	void SetConstant(float inConstant);
};

[Prefix="JPH::"]
interface PhysicsMaterial {
	void PhysicsMaterial();
};

[Prefix="JPH::"]
interface PhysicsMaterialList {
	void PhysicsMaterialList();
	[Const] PhysicsMaterial at(long inIndex);
	void push_back([Const] PhysicsMaterial inMaterial);
	void reserve(unsigned long inSize);
	void resize(unsigned long inSize);
};

[Prefix="JPH::"]
interface Triangle {
	void Triangle();
	void Triangle([Const, Ref] Vec3 inV1, [Const, Ref] Vec3 inV2, [Const, Ref] Vec3 inV3);

	[Value] attribute Float3[] mV;
	attribute unsigned long mMaterialIndex;
};

[Prefix="JPH::"]
interface TriangleList {
	void TriangleList();
	[Ref] Triangle at(long inIndex);
	void push_back([Const, Ref] Triangle inTriangle);
	void reserve(unsigned long inSize);
	void resize(unsigned long inSize);
};

[Prefix="JPH::"]
interface VertexList {
	void VertexList();
	[Ref] Float3 at(long inIndex);
	void push_back([Const, Ref] Float3 inVertex);
	void reserve(unsigned long inSize);
	void resize(unsigned long inSize);
};

[Prefix="JPH::"]
interface IndexedTriangle {
	void IndexedTriangle();
	void IndexedTriangle(unsigned long inI1, unsigned long inI2, unsigned long inI3, unsigned long inMaterialIndex);

	attribute unsigned long[] mIdx;
	attribute unsigned long mMaterialIndex;
};

[Prefix="JPH::"]
interface IndexedTriangleList {
	void IndexedTriangleList();
	[Ref] IndexedTriangle at(long inIndex);
	void push_back([Const, Ref] IndexedTriangle inTriangle);
	void reserve(unsigned long inSize);
	void resize(unsigned long inSize);
};

[Prefix="JPH::Shape::"]
interface ShapeResult {
	boolean IsValid();
	boolean HasError();
	[Const, Ref] JPHString GetError();
	Shape Get();
};

// Shape
[Prefix="JPH::"]
interface ShapeSettings {
	[Value] ShapeResult Create();

	attribute unsigned long long mUserData;
};

[Prefix="JPH::"]
interface Shape {
	EShapeType GetType();
	EShapeSubType GetSubType();
	boolean MustBeStatic();
	[Value] AABox GetLocalBounds();
	[Value] AABox GetWorldSpaceBounds([Const, Ref] Mat44 inCenterOfMassTransform, [Const, Ref] Vec3 inScale);
	[Value] Vec3 GetCenterOfMass();
	long long GetUserData();
	void SetUserData(long long inUserData);
};

interface ShapeGetTriangles
{
	void ShapeGetTriangles(Shape inShape, [Const, Ref] AABox inBox, [Const, Ref] Vec3 inPositionCOM, [Const, Ref] Quat inRotation, [Const, Ref] Vec3 inScale);
	long GetNumTriangles();
	long GetVerticesSize();
	[Const] any GetVerticesData();
	[Const] PhysicsMaterial GetMaterial(long inTriangle);
};

// Convex shape
[Prefix="JPH::"]
interface ConvexShapeSettings {
	[Const] attribute PhysicsMaterial mMaterial;
	attribute float mDensity;
};

ConvexShapeSettings implements ShapeSettings;

[Prefix="JPH::"]
interface ConvexShape {
	float GetDensity();
	void SetDensity(float inDensity);
};

ConvexShape implements Shape;

// Sphere
[Prefix="JPH::"]
interface SphereShapeSettings {
	void SphereShapeSettings(float inRadius, [Const] PhysicsMaterial inMaterial);

	attribute float mRadius;
};

SphereShapeSettings implements ConvexShapeSettings;

[Prefix="JPH::"]
interface SphereShape {
	void SphereShape(float inRadius, [Const] PhysicsMaterial inMaterial);
	float GetRadius();
};

SphereShape implements ConvexShape;

// Box
[Prefix="JPH::"]
interface BoxShapeSettings {
	void BoxShapeSettings([Ref] Vec3 inHalfExtent, optional float inConvexRadius, [Const] optional PhysicsMaterial inMaterial);

	[Value] attribute Vec3 mHalfExtent;
	attribute float mConvexRadius;
};

BoxShapeSettings implements ConvexShapeSettings;

[Prefix="JPH::"]
interface BoxShape {
	void BoxShape([Ref] Vec3 inHalfExtent, optional float inConvexRadius, [Const] optional PhysicsMaterial inMaterial);
	[Value] Vec3 GetHalfExtent();
};

BoxShape implements ConvexShape;

// Cylinder
[Prefix="JPH::"]
interface CylinderShapeSettings {
	void CylinderShapeSettings(float inHalfHeight, float inRadius, optional float inConvexRadius, [Const] optional PhysicsMaterial inMaterial);

	attribute float mHalfHeight;
	attribute float mRadius;
	attribute float mConvexRadius;
};

CylinderShapeSettings implements ConvexShapeSettings;

[Prefix="JPH::"]
interface CylinderShape {
	void CylinderShape(float inHalfHeight, float inRadius, float inConvexRadius, [Const] optional PhysicsMaterial inMaterial);
	float GetRadius();
	float GetHalfHeight();
};

CylinderShape implements ConvexShape;

// Capsule
[Prefix="JPH::"]
interface CapsuleShapeSettings {
	void CapsuleShapeSettings(float inHalfHeight, float inRadius, optional PhysicsMaterial inMaterial);

	attribute float mRadius;
	attribute float mHalfHeightOfCylinder;
};

CapsuleShapeSettings implements ConvexShapeSettings;

[Prefix="JPH::"]
interface CapsuleShape {
	void CapsuleShape(float inHalfHeight, float inRadius, optional PhysicsMaterial inMaterial);
	float GetRadius();
	float GetHalfHeightOfCylinder();
};

CapsuleShape implements ConvexShape;

// Tapered capsule
[Prefix="JPH::"]
interface TaperedCapsuleShapeSettings {
	void TaperedCapsuleShapeSettings(float inHalfHeightOfTaperedCylinder, float inTopRadius, float inBottomRadius, [Const] PhysicsMaterial inMaterial);

	attribute float mHalfHeightOfTaperedCylinder;
	attribute float mTopRadius;
	attribute float mBottomRadius;
};

TaperedCapsuleShapeSettings implements ConvexShapeSettings;

[Prefix="JPH::"]
interface TaperedCapsuleShape {
};

TaperedCapsuleShape implements ConvexShape;

// Convex hull
[Prefix="JPH::"]
interface ConvexHullShapeSettings {
	void ConvexHullShapeSettings();
	
	[Value] attribute ArrayVec3 mPoints;
	attribute float mMaxConvexRadius;
	attribute float mMaxErrorConvexRadius;
	attribute float mHullTolerance;
};

ConvexHullShapeSettings implements ConvexShapeSettings;

[Prefix="JPH::"]
interface ConvexHullShape {
};

ConvexHullShape implements ConvexShape;

// Static compound
[Prefix="JPH::"]
interface StaticCompoundShapeSettings {
	void StaticCompoundShapeSettings();
	void AddShape([Const, Ref] Vec3 inPosition, [Const, Ref] Quat inRotation, [Const] ShapeSettings inShape, unsigned long inUserData);
};

StaticCompoundShapeSettings implements ShapeSettings;

[Prefix="JPH::"]
interface StaticCompoundShape {
};

StaticCompoundShape implements Shape;

// Scaled shape
[Prefix="JPH::"]
interface ScaledShapeSettings {
	void ScaledShapeSettings(ShapeSettings inShape, [Ref, Const] Vec3 inScale);
	
	[Value] attribute Vec3 mScale;
};

ScaledShapeSettings implements ShapeSettings;

[Prefix="JPH::"]
interface ScaledShape {
	void ScaledShape(Shape inShape, [Ref, Const] Vec3 inScale);
};

ScaledShape implements Shape;

// Offset COM
[Prefix="JPH::"]
interface OffsetCenterOfMassShapeSettings {
	void OffsetCenterOfMassShapeSettings([Ref, Const] Vec3 inOffset, ShapeSettings inShape);
	
	[Value] attribute Vec3 mOffset;
};

OffsetCenterOfMassShapeSettings implements ShapeSettings;

[Prefix="JPH::"]
interface OffsetCenterOfMassShape {
};

OffsetCenterOfMassShape implements Shape;

// Rotated translated
[Prefix="JPH::"]
interface RotatedTranslatedShapeSettings {
	void RotatedTranslatedShapeSettings([Ref, Const] Vec3 inPosition, [Ref, Const] Quat inRotation, ShapeSettings inShape);
	
	[Value] attribute Vec3 mPosition;
	[Value] attribute Quat mRotation;
};

RotatedTranslatedShapeSettings implements ShapeSettings;

[Prefix="JPH::"]
interface RotatedTranslatedShape {
};

RotatedTranslatedShape implements Shape;

// Mesh shape
[Prefix="JPH::"]
interface MeshShapeSettings {
	void MeshShapeSettings([Ref, Const] TriangleList inTriangleList, [Ref, Const] PhysicsMaterialList inMaterialList);
	void MeshShapeSettings([Ref, Const] VertexList inVertices, [Ref, Const] IndexedTriangleList inTriangles, [Ref, Const] PhysicsMaterialList inMaterialList);	
};

MeshShapeSettings implements ShapeSettings;

[Prefix="JPH::"]
interface MeshShape {
};

MeshShape implements Shape;

// Constraint
[Prefix="JPH::"]
interface ConstraintSettings {
	attribute boolean mEnabled;
	attribute long mNumVelocityStepsOverride;
	attribute long mNumPositionStepsOverride;
};

[Prefix="JPH::"]
interface Constraint {
	void SetEnabled(boolean inEnabled);
	boolean GetEnabled();
};

// Two body constraint
[Prefix="JPH::"]
interface TwoBodyConstraintSettings {
	Constraint Create([Ref] Body inBody1, [Ref] Body inBody2);
};

TwoBodyConstraintSettings implements ConstraintSettings;

[Prefix="JPH::"]
interface TwoBodyConstraint {
	Body GetBody1();
	Body GetBody2();
};

TwoBodyConstraint implements Constraint;

// Fixed constraint
[Prefix="JPH::"]
interface FixedConstraintSettings {
	void FixedConstraintSettings();
	
	attribute EConstraintSpace mSpace;
	attribute boolean mAutoDetectPoint;
	[Value] attribute Vec3 mPoint1;
	[Value] attribute Vec3 mAxisX1;
	[Value] attribute Vec3 mAxisY1;
	[Value] attribute Vec3 mPoint2;
	[Value] attribute Vec3 mAxisX2;
	[Value] attribute Vec3 mAxisY2;
};

FixedConstraintSettings implements TwoBodyConstraintSettings;

// Spring settings
[Prefix="JPH::"]
interface SpringSettings {
	void SpringSettings();
	
	attribute ESpringMode mMode;
	attribute float mFrequency;
	attribute float mStiffness;
	attribute float mDamping;
};

// Distance constraint
[Prefix="JPH::"]
interface DistanceConstraintSettings {
	void DistanceConstraintSettings();
	
	attribute EConstraintSpace mSpace;
	[Value] attribute Vec3 mPoint1;
	[Value] attribute Vec3 mPoint2;
	attribute float mMinDistance;
	attribute float mMaxDistance;
	[Value] attribute SpringSettings mLimitsSpringSettings;
};

DistanceConstraintSettings implements TwoBodyConstraintSettings;

// Point constraint
[Prefix="JPH::"]
interface PointConstraintSettings {
	void PointConstraintSettings();
	
	attribute EConstraintSpace mSpace;
	[Value] attribute Vec3 mPoint1;
	[Value] attribute Vec3 mPoint2;
};

PointConstraintSettings implements TwoBodyConstraintSettings;

// Hinge constraint
[Prefix="JPH::"]
interface HingeConstraintSettings {
	void HingeConstraintSettings();
	
	attribute EConstraintSpace mSpace;
	[Value] attribute Vec3 mPoint1;
	[Value] attribute Vec3 mHingeAxis1;
	[Value] attribute Vec3 mNormalAxis1;
	[Value] attribute Vec3 mPoint2;
	[Value] attribute Vec3 mHingeAxis2;
	[Value] attribute Vec3 mNormalAxis2;
	attribute float mLimitsMin;
	attribute float mLimitsMax;
	attribute float mMaxFrictionTorque;
};

HingeConstraintSettings implements TwoBodyConstraintSettings;

// Cone constraint
[Prefix="JPH::"]
interface ConeConstraintSettings {
	void ConeConstraintSettings();
	
	attribute EConstraintSpace mSpace;
	[Value] attribute Vec3 mPoint1;
	[Value] attribute Vec3 mTwistAxis1;
	[Value] attribute Vec3 mPoint2;
	[Value] attribute Vec3 mTwistAxis2;
	attribute float mHalfConeAngle;
};

ConeConstraintSettings implements TwoBodyConstraintSettings;

// Slider constraint
[Prefix="JPH::"]
interface SliderConstraintSettings {
	void SliderConstraintSettings();
	
	attribute EConstraintSpace mSpace;
	attribute boolean mAutoDetectPoint;
	[Value] attribute Vec3 mPoint1;
	[Value] attribute Vec3 mSliderAxis1;
	[Value] attribute Vec3 mNormalAxis1;
	[Value] attribute Vec3 mPoint2;
	[Value] attribute Vec3 mSliderAxis2;
	[Value] attribute Vec3 mNormalAxis2;
	attribute float mLimitsMin;
	attribute float mLimitsMax;
	attribute float mMaxFrictionForce;
};

SliderConstraintSettings implements TwoBodyConstraintSettings;

// Swing twist constraint
[Prefix="JPH::"]
interface SwingTwistConstraintSettings {
	void SwingTwistConstraintSettings();
	
	attribute EConstraintSpace mSpace;
	[Value] attribute Vec3 mPosition1;
	[Value] attribute Vec3 mTwistAxis1;
	[Value] attribute Vec3 mPlaneAxis1;
	[Value] attribute Vec3 mPosition2;
	[Value] attribute Vec3 mTwistAxis2;
	[Value] attribute Vec3 mPlaneAxis2;
	attribute float mNormalHalfConeAngle;
	attribute float mPlaneHalfConeAngle;
	attribute float mTwistMinAngle;
	attribute float mTwistMaxAngle;
	attribute float mMaxFrictionTorque;
};

SwingTwistConstraintSettings implements TwoBodyConstraintSettings;

[Prefix="JPH::"]
interface BodyID {
	void BodyID();
	void BodyID([Const, Ref] BodyID inID);
	unsigned long GetIndex();
	unsigned long GetIndexAndSequenceNumber();
};

[Prefix="JPH::"]
interface SubShapeID {
	[Const] long GetValue();
	void SetValue(long inValue);
};

[Prefix="JPH::"]
interface MotionProperties {
	EMotionQuality GetMotionQuality();
	[Value] Vec3 GetLinearVelocity();
	void SetLinearVelocity([Const, Ref] Vec3 inVelocity);
	void SetLinearVelocityClamped([Const, Ref] Vec3 inVelocity);
	[Value] Vec3 GetAngularVelocity();
	void SetAngularVelocity([Const, Ref] Vec3 inVelocity);
	void SetAngularVelocityClamped([Const, Ref] Vec3 inVelocity);
	void MoveKinematic([Const, Ref] Vec3 inPosition, [Const, Ref] Quat inRotation, float inDeltaTime);
	float GetMaxLinearVelocity();
	void SetMaxLinearVelocity(float inVelocity);
	float GetMaxAngularVelocity();
	void SetMaxAngularVelocity(float inVelocity);
	float GetLinearDamping();
	void SetLinearDamping(float inDamping);	
	float GetAngularDamping();
	void SetAngularDamping(float inDamping);
	float GetInverseMass();
	void SetInverseMass(float inInvM);
	[Value] Vec3 GetInverseInertiaDiagonal();
	[Value] Quat GetInertiaRotation();
	void SetInverseInertia([Const, Ref] Vec3 inInvI, [Const, Ref] Quat inRotation);
};

[Prefix="JPH::"]
interface GroupFilter {
};

[Prefix="JPH::"]
interface GroupFilterTable {
	void GroupFilterTable(unsigned long inNumGroups);
	void DisableCollision(unsigned long inSubGroup1, unsigned long inSubGroup2);
	void EnableCollision(unsigned long inSubGroup1, unsigned long inSubGroup2);
	boolean IsCollisionEnabled(unsigned long inSubGroup1, unsigned long inSubGroup2);
};

GroupFilterTable implements GroupFilter;

[Prefix="JPH::"]
interface CollisionGroup {
	void CollisionGroup();
	void CollisionGroup(GroupFilter inFilter, unsigned long inGroupID, unsigned long inSubGroupID);
	void SetGroupFilter(GroupFilter inFilter);
	[Const] GroupFilter GetGroupFilter();
	void SetGroupID(unsigned long inGroupID);
	unsigned long GetGroupID();
	void SetSubGroupID(unsigned long inSubGroupID);
	void GetSubGroupID();
};

[Prefix="JPH::"]
interface Body {
	[Value] BodyID GetID();
	boolean IsActive();
	boolean IsStatic();
	boolean IsKinematic();
	boolean IsDynamic();
	boolean CanBeKinematicOrDynamic();
	EBodyType GetBodyType();
	EMotionType GetMotionType();
	void SetMotionType(EMotionType inMotionType);
	void SetIsSensor(boolean inIsSensor);
	boolean IsSensor();
	unsigned short GetObjectLayer();
	[Ref] CollisionGroup GetCollisionGroup();
	boolean GetAllowSleeping();
	void SetAllowSleeping(boolean inAllow);
	float GetFriction();
	void SetFriction(float inFriction);
	float GetRestitution();
	void SetRestitution(float inRestitution);
	[Value] Vec3 GetLinearVelocity();
	void SetLinearVelocity([Const, Ref] Vec3 inVelocity);
	void SetLinearVelocityClamped([Const, Ref] Vec3 inVelocity);
	[Value] Vec3 GetAngularVelocity();
	void SetAngularVelocity([Const, Ref] Vec3 inVelocity);
	void SetAngularVelocityClamped([Const, Ref] Vec3 inVelocity);
	void AddForce([Const, Ref] Vec3 inForce);
	void AddForce([Const, Ref] Vec3 inForce, [Const, Ref] Vec3 inPosition);
	void AddTorque([Const, Ref] Vec3 inTorque);
	void AddImpulse([Const, Ref] Vec3 inImpulse);
	void AddImpulse([Const, Ref] Vec3 inImpulse, [Const, Ref] Vec3 inPosition);
	void MoveKinematic([Const, Ref] Vec3 inPosition, [Const, Ref] Quat inRotation, float inDeltaTime);
	boolean IsInBroadPhase();
	[Const] Shape GetShape();
	[Value] Vec3 GetPosition();
	[Value] Quat GetRotation();
	[Value] Mat44 GetWorldTransform();
	[Value] Vec3 GetCenterOfMassPosition();
	[Value] Mat44 GetCenterOfMassTransform();
	[Value] AABox GetWorldSpaceBounds();
	MotionProperties GetMotionProperties();
};

[Prefix="JPH::"]
interface BodyInterface {
	Body CreateBody([Const, Ref] BodyCreationSettings inSettings);
	Body CreateSoftBody([Const, Ref] SoftBodyCreationSettings inSettings);
	void DestroyBody([Const, Ref] BodyID inBodyID);
	void AddBody([Const, Ref] BodyID inBodyID, EActivation inActivationMode);
	void RemoveBody([Const, Ref] BodyID inBodyID);
	boolean IsAdded([Const, Ref] BodyID inBodyID);
	[Value] BodyID CreateAndAddBody([Const, Ref] BodyCreationSettings inSettings, EActivation inActivationMode);
	[Value] BodyID CreateAndAddSoftBody([Const, Ref] SoftBodyCreationSettings inSettings, EActivation inActivationMode);
	[Const] Shape GetShape([Const, Ref] BodyID inBodyID);
	void SetShape([Const, Ref] BodyID inBodyID, [Const] Shape inShape, boolean inUpdateMassProperties, EActivation inActivationMode);
	void SetObjectLayer([Const, Ref] BodyID inBodyID, unsigned short inLayer);
	unsigned short GetObjectLayer([Const, Ref] BodyID inBodyID);
	void SetPositionAndRotation([Const, Ref] BodyID inBodyID, [Const, Ref] Vec3 inPosition, [Const, Ref] Quat inRotation, EActivation inActivationMode);
	void SetPositionAndRotationWhenChanged([Const, Ref] BodyID inBodyID, [Const, Ref] Vec3 inPosition, [Const, Ref] Quat inRotation, EActivation inActivationMode);
	void GetPositionAndRotation([Const, Ref] BodyID inBodyID, [Ref] Vec3 outPosition, [Ref] Quat outRotation);
	void SetPosition([Const, Ref] BodyID inBodyID, [Const, Ref] Vec3 inPosition, EActivation inActivationMode);
	[Value] Vec3 GetPosition([Const, Ref] BodyID inBodyID);
	void SetRotation([Const, Ref] BodyID inBodyID, [Const, Ref] Quat inRotation, EActivation inActivationMode);
	[Value] Quat GetRotation([Const, Ref] BodyID inBodyID);
	void MoveKinematic([Const, Ref] BodyID inBodyID, [Const, Ref] Vec3 inPosition, [Const, Ref] Quat inRotation, float inDeltaTime);
	void ActivateBody([Const, Ref] BodyID inBodyID);
	void DeactivateBody([Const, Ref] BodyID inBodyID);
	boolean IsActive([Const, Ref] BodyID inBodyID);
	void SetMotionType([Const, Ref] BodyID inBodyID, EMotionType inMotionType, EActivation inActivationMode);
	void SetMotionQuality([Const, Ref] BodyID inBodyID, EMotionQuality inMotionQuality);
	void AddImpulse([Const, Ref] BodyID inBodyID, [Const, Ref] Vec3 inImpulse);
	void AddImpulse([Const, Ref] BodyID inBodyID, [Const, Ref] Vec3 inImpulse, [Const, Ref] Vec3 inPosition);
	void AddAngularImpulse([Const, Ref] BodyID inBodyID, [Const, Ref] Vec3 inAngularImpulse);
};

[Prefix="JPH::"]
interface StateRecorder {
	void SetValidating(boolean inValidating);
	boolean	IsValidating();
};

[Prefix="JPH::"]
interface StateRecorderImpl {
	void StateRecorderImpl();
	void Clear();
	void Rewind();
	boolean	IsEqual([Ref] StateRecorderImpl inReference);
};

StateRecorderImpl implements StateRecorder;

[Prefix="JPH::"]
interface BodyLockInterface {
	Body TryGetBody([Const, Ref] BodyID inBodyID);
};

[Prefix="JPH::"]
interface BodyLockInterfaceNoLock {
};

BodyLockInterfaceNoLock implements BodyLockInterface;

[Prefix="JPH::"]
interface BodyLockInterfaceLocking {
};

BodyLockInterfaceLocking implements BodyLockInterface;

[Prefix="JPH::"]
interface PhysicsSettings {
	attribute long mMaxInFlightBodyPairs;
	attribute long mStepListenersBatchSize;
	attribute long mStepListenerBatchesPerJob;
	attribute float mBaumgarte;
	attribute float mSpeculativeContactDistance;
	attribute float mPenetrationSlop;
	attribute float mLinearCastThreshold;
	attribute float mLinearCastMaxPenetration;
	attribute float mManifoldToleranceSq;
	attribute float mMaxPenetrationDistance;
	attribute float mBodyPairCacheMaxDeltaPositionSq;
	attribute float mBodyPairCacheCosMaxDeltaRotationDiv2;
	attribute float mContactNormalCosMaxDeltaRotation;
	attribute float mContactPointPreserveLambdaMaxDistSq;
	attribute long mNumVelocitySteps;
	attribute long mNumPositionSteps;
	attribute float mMinVelocityForRestitution;
	attribute float mTimeBeforeSleep;
	attribute float mPointVelocitySleepThreshold;
	attribute boolean mDeterministicSimulation;
	attribute boolean mConstraintWarmStart;
	attribute boolean mUseBodyPairContactCache;
	attribute boolean mUseManifoldReduction;
	attribute boolean mUseLargeIslandSplitter;
	attribute boolean mAllowSleeping;
	attribute boolean mCheckActiveEdges;
};

interface CollideShapeResultFace {
	long size();
	[Ref] Vec3 at(long inIndex);
	void push_back([Const, Ref] Vec3 inValue);
	void resize(unsigned long inSize);
};

[Prefix="JPH::"]
interface CollideShapeResult {
	[Value] attribute Vec3 mContactPointOn1;
	[Value] attribute Vec3 mContactPointOn2;
	[Value] attribute Vec3 mPenetrationAxis;
	attribute float mPenetrationDepth;
	[Value] attribute SubShapeID mSubShapeID1;
	[Value] attribute SubShapeID mSubShapeID2;
	[Value] attribute BodyID mBodyID2;
	[Value] attribute CollideShapeResultFace mShape1Face;
	[Value] attribute CollideShapeResultFace mShape2Face;
};

[Prefix="JPH::"]
interface ContactPoints {
	long size();
	[Ref] Vec3 at(long inIndex);
	void push_back([Const, Ref] Vec3 inValue);
	void resize(unsigned long inSize);
};

[Prefix="JPH::"]
interface ContactManifold {
	[Value] ContactManifold SwapShapes();
	[Value] Vec3 GetWorldSpaceContactPointOn1(unsigned long inIndex);
	[Value] Vec3 GetWorldSpaceContactPointOn2(unsigned long inIndex);

	[Value] attribute Vec3 mBaseOffset;
	[Value] attribute Vec3 mWorldSpaceNormal;
	attribute float mPenetrationDepth;
	[Value] attribute SubShapeID mSubShapeID1;
	[Value] attribute SubShapeID mSubShapeID2;
	[Value] attribute ContactPoints mRelativeContactPointsOn1;
	[Value] attribute ContactPoints mRelativeContactPointsOn2;
};

[Prefix="JPH::"]
interface ContactSettings {
	attribute float mCombinedFriction;
	attribute float mCombinedRestitution;
	attribute float mInvMassScale1;
	attribute float mInvInertiaScale1;
	attribute float mInvMassScale2;
	attribute float mInvInertiaScale2;
	attribute boolean mIsSensor;
	[Value] attribute Vec3 mRelativeLinearSurfaceVelocity;
	[Value] attribute Vec3 mRelativeAngularSurfaceVelocity;
};

[Prefix="JPH::"]
interface SubShapeIDPair {
	[Value] BodyID GetBody1ID();
	[Value] SubShapeID GetSubShapeID1();
	[Value] BodyID GetBody2ID();
	[Value] SubShapeID GetSubShapeID2();
};

[Prefix="JPH::"]
interface ContactListener {
};

interface ContactListenerEm {
};

ContactListenerEm implements ContactListener;

[JSImplementation="ContactListenerEm"]
interface ContactListenerJS {
	void ContactListenerJS();
	long OnContactValidate([Const, Ref] Body inBody1, [Const, Ref] Body inBody2, [Const] Vec3 inBaseOffset, [Const, Ref] CollideShapeResult inCollisionResult);
	void OnContactAdded([Const, Ref] Body inBody1, [Const, Ref] Body inBody2, [Const, Ref] ContactManifold inManifold, [Ref] ContactSettings ioSettings);
	void OnContactPersisted([Const, Ref] Body inBody1, [Const, Ref] Body inBody2, [Const, Ref] ContactManifold inManifold, [Ref] ContactSettings ioSettings);
	void OnContactRemoved([Const, Ref] SubShapeIDPair inSubShapePair);
};

[Prefix="JPH::"]
interface PhysicsSystem {
	[Ref] BodyInterface GetBodyInterface();
	void SetGravity([Const, Ref] Vec3 inGravity);
	[Value] Vec3 GetGravity();
	[Const, Value] PhysicsSettings GetPhysicsSettings();
	void SetPhysicsSettings([Const, Ref] PhysicsSettings inPhysicsSettings);
	unsigned long GetNumBodies();
	unsigned long GetNumActiveBodies(EBodyType inBodyType);
	unsigned long GetMaxBodies();
	void AddConstraint(Constraint inConstraint);
	void RemoveConstraint(Constraint inConstraint);
	void SetContactListener(ContactListener inListener);
	ContactListener GetContactListener();
	[Const, Ref] BodyLockInterfaceNoLock GetBodyLockInterfaceNoLock();
	[Const, Ref] BodyLockInterfaceLocking GetBodyLockInterface();

	void SaveState([Ref] StateRecorder inStream, optional EStateRecorderState inState = "EStateRecorderState::All");
	boolean	RestoreState([Ref] StateRecorder inStream);
};

[Prefix="JPH::"]
interface MassProperties {
	void MassProperties();

	attribute float mMass;
	[Value] attribute Mat44 mInertia;
};

[Prefix="JPH::"]
interface BodyCreationSettings {
	void BodyCreationSettings([Const] Shape inShape, [Ref] Vec3 inPosition, [Ref] Quat inRotation, EMotionType inMotionType, unsigned short inObjectLayer);
	
	[Value] attribute Vec3 mPosition;
	[Value] attribute Quat mRotation;
	[Value] attribute Vec3 mLinearVelocity;
	[Value] attribute Vec3 mAngularVelocity;
	attribute long long mUserData;
	attribute unsigned short mObjectLayer;
	[Value] attribute CollisionGroup mCollisionGroup;
	attribute EMotionType mMotionType;
	attribute EAllowedDOFs mAllowedDOFs;
	attribute boolean mAllowDynamicOrKinematic;
	attribute boolean mIsSensor;
	attribute EMotionQuality mMotionQuality;
	attribute boolean mAllowSleeping;
	attribute float mFriction;
	attribute float mRestitution;
	attribute float mLinearDamping;
	attribute float mAngularDamping;
	attribute float mMaxLinearVelocity;
	attribute float mMaxAngularVelocity;
	attribute float mGravityFactor;
	attribute EOverrideMassProperties mOverrideMassProperties;
	attribute float mInertiaMultiplier;
	[Value] attribute MassProperties mMassPropertiesOverride;
};

interface SoftBodySharedSettingsVertex {
	void SoftBodySharedSettingsVertex();

	[Value] attribute Float3 mPosition;
	[Value] attribute Float3 mVelocity;
	attribute float mInvMass;
};

interface SoftBodySharedSettingsFace {
	void SoftBodySharedSettingsFace(unsigned long inVertex1, unsigned long inVertex2, unsigned long inVertex3, unsigned long inMaterialIndex);

	attribute unsigned long[] mVertex;
	attribute unsigned long mMaterialIndex;
};

interface SoftBodySharedSettingsEdge {
	void SoftBodySharedSettingsEdge(unsigned long inVertex1, unsigned long inVertex2, float inCompliance);

	attribute unsigned long[] mVertex;
	attribute float mRestLength;
	attribute float mCompliance;
};

interface SoftBodySharedSettingsVolume {
	void SoftBodySharedSettingsVolume(unsigned long inVertex1, unsigned long inVertex2, unsigned long inVertex3, unsigned long inVertex4, float inCompliance);

	attribute unsigned long[] mVertex;
	attribute float mSixRestVolume;
	attribute float mCompliance;
};

interface ArraySoftBodySharedSettingsVertex {
	long size();
	[Ref] SoftBodySharedSettingsVertex at(long inIndex);
	void push_back([Const, Ref] SoftBodySharedSettingsVertex inValue);
	void reserve(unsigned long inSize);
	void resize(unsigned long inSize);
};

interface ArraySoftBodySharedSettingsFace {
	long size();
	[Ref] SoftBodySharedSettingsFace at(long inIndex);
	void push_back([Const, Ref] SoftBodySharedSettingsFace inValue);
	void reserve(unsigned long inSize);
	void resize(unsigned long inSize);
};

interface ArraySoftBodySharedSettingsEdge {
	long size();
	[Ref] SoftBodySharedSettingsEdge at(long inIndex);
	void push_back([Const, Ref] SoftBodySharedSettingsEdge inValue);
	void reserve(unsigned long inSize);
	void resize(unsigned long inSize);
};

interface ArraySoftBodySharedSettingsVolume {
	long size();
	[Ref] SoftBodySharedSettingsVolume at(long inIndex);
	void push_back([Const, Ref] SoftBodySharedSettingsVolume inValue);
	void reserve(unsigned long inSize);
	void resize(unsigned long inSize);
};

[Prefix="JPH::"]
interface SoftBodySharedSettings {
	void SoftBodySharedSettings();

	void AddFace([Const, Ref] SoftBodySharedSettingsFace inFace);
	void CalculateEdgeLengths();
	void CalculateVolumeConstraintVolumes();
	void Optimize();

	[Value] attribute ArraySoftBodySharedSettingsVertex mVertices;
	[Value] attribute ArraySoftBodySharedSettingsFace mFaces;
	[Value] attribute ArraySoftBodySharedSettingsEdge mEdgeConstraints;
	[Value] attribute ArraySoftBodySharedSettingsVolume mVolumeConstraints;
	[Value] attribute PhysicsMaterialList mMaterials;
};

[Prefix="JPH::"]
interface SoftBodyCreationSettings {
	void SoftBodyCreationSettings([Const] SoftBodySharedSettings inSettings, [Ref] Vec3 inPosition, [Ref] Quat inRotation, unsigned short inObjectLayer);
	
	[Value] attribute Vec3 mPosition;
	[Value] attribute Quat mRotation;
	attribute long long mUserData;
	attribute unsigned short mObjectLayer;
	[Value] attribute CollisionGroup mCollisionGroup;
	attribute unsigned long mNumIterations;
	attribute float mLinearDamping;
	attribute float mMaxLinearVelocity;
	attribute float mRestitution;
	attribute float mFriction;
	attribute float mPressure;
	attribute float mGravityFactor;
	attribute boolean mUpdatePosition;
	attribute boolean mMakeRotationIdentity;
};

[Prefix="JPH::"]
interface CharacterBaseSettings {
	[Value] attribute Vec3 mUp;
	[Value] attribute Plane mSupportingVolume;
	attribute float mMaxSlopeAngle;
	[Const] attribute Shape mShape;
};

[Prefix="JPH::"]
interface CharacterVirtualSettings {
	void CharacterVirtualSettings();
	
	attribute float mMass;
	attribute float mMaxStrength;
	[Value] attribute Vec3 mShapeOffset;
	attribute EBackFaceMode mBackFaceMode;
	attribute float mPredictiveContactDistance;
	attribute unsigned long mMaxCollisionIterations;
	attribute unsigned long mMaxConstraintIterations;
	attribute float mMinTimeRemaining;
	attribute float mCollisionTolerance;
	attribute float mCharacterPadding;
	attribute unsigned long mMaxNumHits;
	attribute float mHitReductionCosMaxAngle;
	attribute float mPenetrationRecoverySpeed;
};

CharacterVirtualSettings implements CharacterBaseSettings;

[Prefix="JPH::"]
interface CharacterContactSettings
{
	attribute boolean mCanPushCharacter;
	attribute boolean mCanReceiveImpulses;
};

[Prefix="JPH::"]
interface CharacterContactListener {
};

interface CharacterContactListenerEm {
};

CharacterContactListenerEm implements CharacterContactListener;

[JSImplementation="CharacterContactListenerEm"]
interface CharacterContactListenerJS {
	void CharacterContactListenerJS();
	void OnAdjustBodyVelocity([Const] CharacterVirtual inCharacter, [Const, Ref] Body inBody2, [Ref] Vec3 ioLinearVelocity, [Ref] Vec3 ioAngularVelocity);
	boolean OnContactValidate([Const] CharacterVirtual inCharacter, [Const, Ref] BodyID inBodyID2, [Const, Ref] SubShapeID inSubShapeID2);
	void OnContactAdded([Const] CharacterVirtual inCharacter, [Const, Ref] BodyID inBodyID2, [Const, Ref] SubShapeID inSubShapeID2, Vec3 inContactPosition, Vec3 inContactNormal, [Ref] CharacterContactSettings ioSettings);
	void OnContactSolve([Const] CharacterVirtual inCharacter, [Const, Ref] BodyID inBodyID2, [Const, Ref] SubShapeID inSubShapeID2, Vec3 inContactPosition, Vec3 inContactNormal, Vec3 inContactVelocity, [Const] PhysicsMaterial inContactMaterial, Vec3 inCharacterVelocity, [Ref] Vec3 ioNewCharacterVelocity);
};

[Prefix="JPH::CharacterVirtual::"]
interface ExtendedUpdateSettings {
	void ExtendedUpdateSettings();
	
	[Value] attribute Vec3 mStickToFloorStepDown;
	[Value] attribute Vec3 mWalkStairsStepUp;
	attribute float mWalkStairsMinStepForward;
	attribute float mWalkStairsStepForwardTest;
	attribute float mWalkStairsCosAngleForwardContact;
	[Value] attribute Vec3 mWalkStairsStepDownExtra;
};

[Prefix="JPH::"]
interface TempAllocator {
};

[Prefix="JPH::"]
interface BroadPhaseLayerFilter {
};

[Prefix="JPH::"]
interface ObjectVsBroadPhaseLayerFilter {
};

[Prefix="JPH::"]
interface DefaultBroadPhaseLayerFilter {
	void DefaultBroadPhaseLayerFilter([Const, Ref] ObjectVsBroadPhaseLayerFilter inFilter, unsigned short inObjectLayer);
};

DefaultBroadPhaseLayerFilter implements ObjectLayerFilter;

[Prefix="JPH::"]
interface ObjectLayerFilter {
};

[Prefix="JPH::"]
interface ObjectLayerPairFilter {
};

[Prefix="JPH::"]
interface DefaultObjectLayerFilter {
	void DefaultObjectLayerFilter([Const, Ref] ObjectLayerPairFilter inFilter, unsigned short inObjectLayer);
};

DefaultObjectLayerFilter implements ObjectLayerFilter;

[Prefix="JPH::"]
interface SpecifiedObjectLayerFilter {
	void SpecifiedObjectLayerFilter(unsigned short inObjectLayer);
};

SpecifiedObjectLayerFilter implements ObjectLayerFilter;

[Prefix="JPH::"]
interface BodyFilter {
	void BodyFilter();
};

[Prefix="JPH::"]
interface IgnoreSingleBodyFilter {
	void IgnoreSingleBodyFilter([Const, Ref] BodyID inBodyID);
};

IgnoreSingleBodyFilter implements BodyFilter;

[Prefix="JPH::"]
interface IgnoreMultipleBodiesFilter {
	void Clear();
	void Reserve(unsigned long inSize);
	void IgnoreBody([Const, Ref] BodyID inBodyID);
};

IgnoreMultipleBodiesFilter implements BodyFilter;

[Prefix="JPH::"]
interface ShapeFilter {
	void ShapeFilter();
};

[Prefix="JPH::"]
interface CharacterBase {
	void SetMaxSlopeAngle(float inMaxSlopeAngle);
	float GetCosMaxSlopeAngle();
	void SetUp([Const, Ref] Vec3 inUp);
	[Value] Vec3 GetUp();
	[Const] Shape GetShape();
	EGroundState GetGroundState();
	boolean IsSlopeTooSteep([Ref] Vec3 inNormal);
	boolean IsSupported();
	[Value] Vec3 GetGroundPosition();
	[Value] Vec3 GetGroundNormal();
	[Value] Vec3 GetGroundVelocity();
	[Const] PhysicsMaterial GetGroundMaterial();
	[Value] BodyID GetGroundBodyID();
};

[Prefix="JPH::"]
interface CharacterVirtual {
	void CharacterVirtual([Const] CharacterVirtualSettings inSettings, [Ref] Vec3 inPosition, [Ref] Quat inRotation, PhysicsSystem inSystem);
	void SetListener(CharacterContactListener inListener);
	CharacterContactListener GetListener();
	[Value] Vec3 GetLinearVelocity();
	void SetLinearVelocity([Const, Ref] Vec3 inLinearVelocity);
	[Value] Vec3 GetPosition();
	void SetPosition([Const, Ref] Vec3 inPosition);
	[Value] Quat GetRotation();
	void SetRotation([Const, Ref] Quat inRotation);
	[Value] Mat44 GetWorldTransform();
	[Value] Mat44 GetCenterOfMassTransform();
	float GetMass();
	void SetMass(float inMass);
	float GetMaxStrength();
	void SetMaxStrength(float inMaxStrength);
	float GetPenetrationRecoverySpeed();
	void SetPenetrationRecoverySpeed(float inSpeed);
	float GetCharacterPadding();
	unsigned long GetMaxNumHits();
	void SetMaxNumHits(unsigned long inMaxHits);
	float GetHitReductionCosMaxAngle();
	void SetHitReductionCosMaxAngle(float inCosMaxAngle);
	boolean GetMaxHitsExceeded();
	[Value] Vec3 GetShapeOffset();
	void SetShapeOffset([Const, Ref] Vec3 inShapeOffset);
	[Value] Vec3 CancelVelocityTowardsSteepSlopes([Const, Ref] Vec3 inDesiredVelocity);
	void Update(float inDeltaTime, [Const, Ref] Vec3 inGravity, [Const, Ref] BroadPhaseLayerFilter inBroadPhaseLayerFilter, [Const, Ref] ObjectLayerFilter inObjectLayerFilter, [Const, Ref] BodyFilter inBodyFilter, [Const, Ref] ShapeFilter inShapeFilter, [Ref] TempAllocator inAllocator);
	boolean CanWalkStairs([Const, Ref] Vec3 inLinearVelocity);
	boolean WalkStairs(float inDeltaTime, [Const, Ref] Vec3 inStepUp, [Const, Ref] Vec3 inStepForward, [Const, Ref] Vec3 inStepForwardTest, [Const, Ref] Vec3 inStepDownExtra, [Const, Ref] BroadPhaseLayerFilter inBroadPhaseLayerFilter, [Const, Ref] ObjectLayerFilter inObjectLayerFilter, [Const, Ref] BodyFilter inBodyFilter, [Const, Ref] ShapeFilter inShapeFilter, [Ref] TempAllocator inAllocator);
	boolean StickToFloor([Const, Ref] Vec3 inStepDown, [Const, Ref] BroadPhaseLayerFilter inBroadPhaseLayerFilter, [Const, Ref] ObjectLayerFilter inObjectLayerFilter, [Const, Ref] BodyFilter inBodyFilter, [Const, Ref] ShapeFilter inShapeFilter, [Ref] TempAllocator inAllocator);
	void ExtendedUpdate(float inDeltaTime, [Const, Ref] Vec3 inGravity, [Const, Ref] ExtendedUpdateSettings inSettings, [Const, Ref] BroadPhaseLayerFilter inBroadPhaseLayerFilter, [Const, Ref] ObjectLayerFilter inObjectLayerFilter, [Const, Ref] BodyFilter inBodyFilter, [Const, Ref] ShapeFilter inShapeFilter, [Ref] TempAllocator inAllocator);
	void RefreshContacts([Const, Ref] BroadPhaseLayerFilter inBroadPhaseLayerFilter, [Const, Ref] ObjectLayerFilter inObjectLayerFilter, [Const, Ref] BodyFilter inBodyFilter, [Const, Ref] ShapeFilter inShapeFilter, [Ref] TempAllocator inAllocator);
	void UpdateGroundVelocity();
	boolean SetShape([Const] Shape inShape, float inMaxPenetrationDepth, [Const, Ref] BroadPhaseLayerFilter inBroadPhaseLayerFilter, [Const, Ref] ObjectLayerFilter inObjectLayerFilter, [Const, Ref] BodyFilter inBodyFilter, [Const, Ref] ShapeFilter inShapeFilter, [Ref] TempAllocator inAllocator);
};

CharacterVirtual implements CharacterBase;

interface JoltSettings {
	void JoltSettings();

	attribute unsigned long mMaxBodies;
	attribute unsigned long mMaxBodyPairs;
	attribute unsigned long mMaxContactConstraints;
};

interface JoltInterface {
	void JoltInterface([Const, Ref] JoltSettings inSettings);
	void Step(float inDeltaTime, long inCollisionSteps);
	PhysicsSystem GetPhysicsSystem();
	TempAllocator GetTempAllocator();
	ObjectLayerPairFilter GetObjectLayerPairFilter();
	ObjectVsBroadPhaseLayerFilter GetObjectVsBroadPhaseLayerFilter();
};
