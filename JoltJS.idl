// SPDX-FileCopyrightText: 2022 Jorrit Rouwe
// SPDX-License-Identifier: MIT

interface JPHString {
	[Const] DOMString c_str(); // TODO: This is not a nice way to get a string from an interface
	unsigned long size();
};

interface ArrayVec3 {
	long size();
	[Ref] Vec3 at(long inIndex);
	void push_back([Const, Ref] Vec3 inValue);
	void reserve(unsigned long inSize);
	void resize(unsigned long inSize);
};

enum Layers {
	"Layers::MOVING",
	"Layers::NON_MOVING"
};

enum EBodyType {
	"EBodyType::RigidBody",
	"EBodyType::SoftBody"
};

enum EMotionType {
	"EMotionType::Static",
	"EMotionType::Kinematic",
	"EMotionType::Dynamic"
};

enum EMotionQuality {
	"EMotionQuality::Discrete",
	"EMotionQuality::LinearCast"
};

enum EActivation {
	"EActivation::Activate",
	"EActivation::DontActivate"
};

enum EShapeType {
	"EShapeType::Convex",
	"EShapeType::Compound",
	"EShapeType::Decorated",
	// Omitting EShapeType::Mesh because of name conflict, use ShapeType instead
	// Omitting EShapeType::HeightField because of name conflict, use ShapeType instead
};

enum ShapeType {
	"ShapeType::EShapeType_Convex",
	"ShapeType::EShapeType_Compound",
	"ShapeType::EShapeType_Decorated",
	"ShapeType::EShapeType_Mesh",
	"ShapeType::EShapeType_HeightField"
};

enum EShapeSubType {
	"EShapeSubType::Sphere",
	"EShapeSubType::Box",
	"EShapeSubType::Capsule",
	"EShapeSubType::TaperedCapsule",
	"EShapeSubType::Cylinder",
	"EShapeSubType::ConvexHull",
	"EShapeSubType::StaticCompound",
	"EShapeSubType::MutableCompound",
	"EShapeSubType::RotatedTranslated",
	"EShapeSubType::Scaled",
	"EShapeSubType::OffsetCenterOfMass",
	// Omitting EShapeSubType::Mesh because of name conflict, use ShapeSubType instead
	// Omitting EShapeSubType::HeightField because of name conflict, use ShapeSubType instead
};

enum ShapeSubType {
	"ShapeSubType::EShapeSubType_Sphere",
	"ShapeSubType::EShapeSubType_Box",
	"ShapeSubType::EShapeSubType_Capsule",
	"ShapeSubType::EShapeSubType_TaperedCapsule",
	"ShapeSubType::EShapeSubType_Cylinder",
	"ShapeSubType::EShapeSubType_ConvexHull",
	"ShapeSubType::EShapeSubType_StaticCompound",
	"ShapeSubType::EShapeSubType_MutableCompound",
	"ShapeSubType::EShapeSubType_RotatedTranslated",
	"ShapeSubType::EShapeSubType_Scaled",
	"ShapeSubType::EShapeSubType_OffsetCenterOfMass",
	"ShapeSubType::EShapeSubType_Mesh",
	"ShapeSubType::EShapeSubType_HeightField"
};

enum EConstraintSpace {
	"EConstraintSpace::LocalToBodyCOM",
	"EConstraintSpace::WorldSpace"
};

enum ESpringMode {
	"ESpringMode::FrequencyAndDamping",
	"ESpringMode::StiffnessAndDamping",
};

enum EOverrideMassProperties {
	"EOverrideMassProperties::CalculateMassAndInertia",
	"EOverrideMassProperties::CalculateInertia",
	"EOverrideMassProperties::MassAndInertiaProvided"
};

enum EAllowedDOFs {
	"EAllowedDOFs::TranslationX",
	"EAllowedDOFs::TranslationY",
	"EAllowedDOFs::TranslationZ",
	"EAllowedDOFs::RotationX",
	"EAllowedDOFs::RotationY",
	"EAllowedDOFs::RotationZ",
	"EAllowedDOFs::Plane2D"
};

enum EStateRecorderState {
	"EStateRecorderState::None",
	"EStateRecorderState::Global",
	"EStateRecorderState::Bodies",
	"EStateRecorderState::Contacts",
	"EStateRecorderState::Constraints",
	"EStateRecorderState::All"
};

enum EBackFaceMode {
	"EBackFaceMode::IgnoreBackFaces",
	"EBackFaceMode::CollideWithBackFaces"
};

enum EGroundState {
	"EGroundState::OnGround",
	"EGroundState::OnSteepGround",
	"EGroundState::NotSupported",
	"EGroundState::InAir"
};

enum ValidateResult {
	"ValidateResult::AcceptAllContactsForThisBodyPair",
	"ValidateResult::AcceptContact",
	"ValidateResult::RejectContact",
	"ValidateResult::RejectAllContactsForThisBodyPair"
};

enum EActiveEdgeMode {
	"EActiveEdgeMode::CollideOnlyWithActive",
	"EActiveEdgeMode::CollideWithAll"
};

enum ECollectFacesMode {
	"ECollectFacesMode::CollectFaces",
	"ECollectFacesMode::NoFaces"
};

interface Vec3 {
	void Vec3();
	void Vec3(float inX, float inY, float inZ);
	[Value] static Vec3 sZero();
	[Value] static Vec3 sAxisX();
	[Value] static Vec3 sAxisY();
	[Value] static Vec3 sAxisZ();
	[Operator="[]"] float GetComponent(unsigned long inCoordinate);
	float Length();
	[Value] Vec3 Normalized();
	[Value] Vec3 GetNormalizedPerpendicular();
	float GetX();
	float GetY();
	float GetZ();
	void SetX(float inX);
	void SetY(float inY);
	void SetZ(float inZ);
	void SetComponent(unsigned long inCoordinate, float inValue);
	boolean IsNearZero(optional float inMaxDistSq);
};

interface Quat {
	void Quat();
	void Quat(float inX, float inY, float inZ, float inW);
	[Value] static Quat sIdentity();
	[Value] static Quat sRotation([Const, Ref] Vec3 inRotation, float inAngle);
	float Length();
	[Value] Quat Normalized();
	[Value] static Quat sEulerAngles([Const, Ref] Vec3 inInput);
	float GetX();
	float GetY();
	float GetZ();
	float GetW();
	[Const, Value] Vec3 RotateAxisX();
	[Const, Value] Vec3 RotateAxisY();
	[Const, Value] Vec3 RotateAxisZ();
};

interface Float3 {
	void Float3(float inX, float inY, float inZ);	

	attribute float x;
	attribute float y;
	attribute float z;
};

interface Mat44 {
	[Value] static Mat44 sIdentity();
	[Value] static Mat44 sRotationTranslation([Const, Ref] Quat inRotation, [Const, Ref] Vec3 inTranslation);
	[Value] Vec3 GetAxisX();
	[Value] Vec3 GetAxisY();
	[Value] Vec3 GetAxisZ();
	[Value] Mat44 GetRotation();
	[Value] Quat GetQuaternion();
	[Value] Vec3 GetTranslation();
};

interface AABox {
	void AABox([Const, Ref] Vec3 inMin, [Const, Ref] Vec3 inMax);	
	[Value] static AABox sBiggest();
	
	[Value] attribute Vec3 mMin;
	[Value] attribute Vec3 mMax;
};

interface OrientedBox {
	void OrientedBox([Const, Ref] Mat44 inOrientation, [Const, Ref] Vec3 inHalfExtents);

	[Value] attribute Mat44 mOrientation;
	[Value] attribute Vec3 mHalfExtents;
};

interface RayCast {
	void RayCast([Const, Ref] Vec3 inOrigin, [Const, Ref] Vec3 inDirection);

	[Value] attribute Vec3 mOrigin;
	[Value] attribute Vec3 mDirection;
};

interface RRayCast {
	void RRayCast([Const, Ref] Vec3 inOrigin, [Const, Ref] Vec3 inDirection);

	[Value] attribute Vec3 mOrigin;
	[Value] attribute Vec3 mDirection;
};

interface BroadPhaseCastResult {
	[Value] attribute BodyID mBodyID;
	attribute float mFraction;
};

interface RayCastResult {
	[Value] attribute SubShapeID mSubShapeID2;
};

RayCastResult implements BroadPhaseCastResult;

interface AABoxCast {
	void AABoxCast();

	[Value] attribute AABox mBox;
	[Value] attribute Vec3 mDirection;
};

interface ShapeCast {
	void ShapeCast([Const] Shape inShape, [Const, Ref] Vec3 inScale, [Const, Ref] Mat44 inCenterOfMassStart, [Const, Ref] Vec3 inDirection);

	[Const] readonly attribute Shape mShape;
	[Const, Value] readonly attribute Vec3 mScale;
	[Const, Value] readonly attribute Mat44 mCenterOfMassStart;
	[Const, Value] readonly attribute Vec3 mDirection;
};

interface RShapeCast {
	void RShapeCast([Const] Shape inShape, [Const, Ref] Vec3 inScale, [Const, Ref] Mat44 inCenterOfMassStart, [Const, Ref] Vec3 inDirection);

	[Const] readonly attribute Shape mShape;
	[Const, Value] readonly attribute Vec3 mScale;
	[Const, Value] readonly attribute Mat44 mCenterOfMassStart;
	[Const, Value] readonly attribute Vec3 mDirection;
};

interface Plane {
	void Plane([Const, Ref] Vec3 inNormal, float inConstant);
	[Value] Vec3 GetNormal();
	void SetNormal([Const, Ref] Vec3 inNormal);
	float GetConstant();
	void SetConstant(float inConstant);
};

interface TransformedShape {
	void CastRay([Const, Ref] RRayCast inRay, [Const, Ref] RayCastSettings inRayCastSettings, [Ref] CastRayCollector ioCollector, [Const, Ref] ShapeFilter inShapeFilter);
	void CollidePoint([Const, Ref] Vec3 inPoint, [Ref] CollidePointCollector ioCollector, [Const, Ref] ShapeFilter inShapeFilter);
	void CollideShape([Const] Shape inShape, [Const, Ref] Vec3 inShapeScale, [Const, Ref] Mat44 inCenterOfMassTransform, [Const, Ref] CollideShapeSettings inCollideShapeSettings, [Const, Ref] Vec3 inBaseOffset, [Ref] CollideShapeCollector ioCollector, [Const, Ref] ShapeFilter inShapeFilter);
	void CastShape([Const, Ref] RShapeCast inShapeCast, [Const, Ref] ShapeCastSettings inShapeCastSettings, [Const, Ref] Vec3 inBaseOffset, [Ref] CastShapeCollector ioCollector, [Const, Ref] ShapeFilter inShapeFilter);
	void CollectTransformedShapes([Const, Ref] AABox inBox, [Ref] TransformedShapeCollector ioCollector, [Const, Ref] ShapeFilter inShapeFilter);
	[Value] Vec3 GetShapeScale();
	void SetShapeScale([Const, Ref] Vec3 inScale);
	[Value] Mat44 GetCenterOfMassTransform();
	[Value] Mat44 GetInverseCenterOfMassTransform();
	void SetWorldTransform([Const, Ref] Vec3 inPosition, [Const, Ref] Quat inRotation, [Const, Ref] Vec3 inScale);
	void SetWorldTransform([Const, Ref] Mat44 inTransform);
	[Value] Mat44 GetWorldTransform();
	[Value] AABox GetWorldSpaceBounds();
	[Value] Vec3 GetWorldSpaceSurfaceNormal([Const, Ref] SubShapeID inSubShapeID, [Const, Ref] Vec3 inPosition);
	[Const] PhysicsMaterial GetMaterial([Const, Ref] SubShapeID inSubShapeID);

	[Value] attribute Vec3 mShapePositionCOM;
	[Value] attribute Quat mShapeRotation;
	[Const] attribute Shape mShape;
	[Value] attribute Float3 mShapeScale;
	[Value] attribute BodyID mBodyID;
};

interface PhysicsMaterial {
	void PhysicsMaterial();
};

interface PhysicsMaterialList {
	void PhysicsMaterialList();
	[Const] PhysicsMaterial at(long inIndex);
	void push_back([Const] PhysicsMaterial inMaterial);
	void reserve(unsigned long inSize);
	void resize(unsigned long inSize);
};

interface Triangle {
	void Triangle();
	void Triangle([Const, Ref] Vec3 inV1, [Const, Ref] Vec3 inV2, [Const, Ref] Vec3 inV3);

	[Value] attribute Float3[] mV;
	attribute unsigned long mMaterialIndex;
};

interface TriangleList {
	void TriangleList();
	[Ref] Triangle at(long inIndex);
	void push_back([Const, Ref] Triangle inTriangle);
	void reserve(unsigned long inSize);
	void resize(unsigned long inSize);
};

interface VertexList {
	void VertexList();
	[Ref] Float3 at(long inIndex);
	void push_back([Const, Ref] Float3 inVertex);
	void reserve(unsigned long inSize);
	void resize(unsigned long inSize);
};

interface IndexedTriangle {
	void IndexedTriangle();
	void IndexedTriangle(unsigned long inI1, unsigned long inI2, unsigned long inI3, unsigned long inMaterialIndex);

	attribute unsigned long[] mIdx;
	attribute unsigned long mMaterialIndex;
};

interface IndexedTriangleList {
	void IndexedTriangleList();
	[Ref] IndexedTriangle at(long inIndex);
	void push_back([Const, Ref] IndexedTriangle inTriangle);
	void reserve(unsigned long inSize);
	void resize(unsigned long inSize);
};

[Prefix="Shape::"]
interface ShapeResult {
	boolean IsValid();
	boolean HasError();
	[Const, Ref] JPHString GetError();
	Shape Get();
};

// Shape
interface ShapeSettings {
	[Value] ShapeResult Create();

	attribute unsigned long long mUserData;
};

interface Shape {
	EShapeType GetType();
	EShapeSubType GetSubType();
	boolean MustBeStatic();
	[Value] AABox GetLocalBounds();
	[Value] AABox GetWorldSpaceBounds([Const, Ref] Mat44 inCenterOfMassTransform, [Const, Ref] Vec3 inScale);
	[Value] Vec3 GetCenterOfMass();
	long long GetUserData();
	void SetUserData(long long inUserData);
};

interface ShapeGetTriangles
{
	void ShapeGetTriangles(Shape inShape, [Const, Ref] AABox inBox, [Const, Ref] Vec3 inPositionCOM, [Const, Ref] Quat inRotation, [Const, Ref] Vec3 inScale);
	long GetNumTriangles();
	long GetVerticesSize();
	[Const] any GetVerticesData();
	[Const] PhysicsMaterial GetMaterial(long inTriangle);
};

// Convex shape
interface ConvexShapeSettings {
	[Const] attribute PhysicsMaterial mMaterial;
	attribute float mDensity;
};

ConvexShapeSettings implements ShapeSettings;

interface ConvexShape {
	float GetDensity();
	void SetDensity(float inDensity);
};

ConvexShape implements Shape;

// Sphere
interface SphereShapeSettings {
	void SphereShapeSettings(float inRadius, [Const] PhysicsMaterial inMaterial);

	attribute float mRadius;
};

SphereShapeSettings implements ConvexShapeSettings;

interface SphereShape {
	void SphereShape(float inRadius, [Const] PhysicsMaterial inMaterial);
	float GetRadius();
};

SphereShape implements ConvexShape;

// Box
interface BoxShapeSettings {
	void BoxShapeSettings([Ref] Vec3 inHalfExtent, optional float inConvexRadius, [Const] optional PhysicsMaterial inMaterial);

	[Value] attribute Vec3 mHalfExtent;
	attribute float mConvexRadius;
};

BoxShapeSettings implements ConvexShapeSettings;

interface BoxShape {
	void BoxShape([Ref] Vec3 inHalfExtent, optional float inConvexRadius, [Const] optional PhysicsMaterial inMaterial);
	[Value] Vec3 GetHalfExtent();
};

BoxShape implements ConvexShape;

// Cylinder
interface CylinderShapeSettings {
	void CylinderShapeSettings(float inHalfHeight, float inRadius, optional float inConvexRadius, [Const] optional PhysicsMaterial inMaterial);

	attribute float mHalfHeight;
	attribute float mRadius;
	attribute float mConvexRadius;
};

CylinderShapeSettings implements ConvexShapeSettings;

interface CylinderShape {
	void CylinderShape(float inHalfHeight, float inRadius, float inConvexRadius, [Const] optional PhysicsMaterial inMaterial);
	float GetRadius();
	float GetHalfHeight();
};

CylinderShape implements ConvexShape;

// Capsule
interface CapsuleShapeSettings {
	void CapsuleShapeSettings(float inHalfHeight, float inRadius, optional PhysicsMaterial inMaterial);

	attribute float mRadius;
	attribute float mHalfHeightOfCylinder;
};

CapsuleShapeSettings implements ConvexShapeSettings;

interface CapsuleShape {
	void CapsuleShape(float inHalfHeight, float inRadius, optional PhysicsMaterial inMaterial);
	float GetRadius();
	float GetHalfHeightOfCylinder();
};

CapsuleShape implements ConvexShape;

// Tapered capsule
interface TaperedCapsuleShapeSettings {
	void TaperedCapsuleShapeSettings(float inHalfHeightOfTaperedCylinder, float inTopRadius, float inBottomRadius, [Const] PhysicsMaterial inMaterial);

	attribute float mHalfHeightOfTaperedCylinder;
	attribute float mTopRadius;
	attribute float mBottomRadius;
};

TaperedCapsuleShapeSettings implements ConvexShapeSettings;

interface TaperedCapsuleShape {
};

TaperedCapsuleShape implements ConvexShape;

// Convex hull
interface ConvexHullShapeSettings {
	void ConvexHullShapeSettings();
	
	[Value] attribute ArrayVec3 mPoints;
	attribute float mMaxConvexRadius;
	attribute float mMaxErrorConvexRadius;
	attribute float mHullTolerance;
};

ConvexHullShapeSettings implements ConvexShapeSettings;

interface ConvexHullShape {
};

ConvexHullShape implements ConvexShape;

// Static compound
interface StaticCompoundShapeSettings {
	void StaticCompoundShapeSettings();
	void AddShape([Const, Ref] Vec3 inPosition, [Const, Ref] Quat inRotation, [Const] ShapeSettings inShape, unsigned long inUserData);
};

StaticCompoundShapeSettings implements ShapeSettings;

interface StaticCompoundShape {
};

StaticCompoundShape implements Shape;

// Scaled shape
interface ScaledShapeSettings {
	void ScaledShapeSettings(ShapeSettings inShape, [Ref, Const] Vec3 inScale);
	
	[Value] attribute Vec3 mScale;
};

ScaledShapeSettings implements ShapeSettings;

interface ScaledShape {
	void ScaledShape(Shape inShape, [Ref, Const] Vec3 inScale);
};

ScaledShape implements Shape;

// Offset COM
interface OffsetCenterOfMassShapeSettings {
	void OffsetCenterOfMassShapeSettings([Ref, Const] Vec3 inOffset, ShapeSettings inShape);
	
	[Value] attribute Vec3 mOffset;
};

OffsetCenterOfMassShapeSettings implements ShapeSettings;

interface OffsetCenterOfMassShape {
};

OffsetCenterOfMassShape implements Shape;

// Rotated translated
interface RotatedTranslatedShapeSettings {
	void RotatedTranslatedShapeSettings([Ref, Const] Vec3 inPosition, [Ref, Const] Quat inRotation, ShapeSettings inShape);
	
	[Value] attribute Vec3 mPosition;
	[Value] attribute Quat mRotation;
};

RotatedTranslatedShapeSettings implements ShapeSettings;

interface RotatedTranslatedShape {
};

RotatedTranslatedShape implements Shape;

// Mesh shape
interface MeshShapeSettings {
	void MeshShapeSettings([Ref, Const] TriangleList inTriangleList, [Ref, Const] PhysicsMaterialList inMaterialList);
	void MeshShapeSettings([Ref, Const] VertexList inVertices, [Ref, Const] IndexedTriangleList inTriangles, [Ref, Const] PhysicsMaterialList inMaterialList);	
};

MeshShapeSettings implements ShapeSettings;

interface MeshShape {
};

MeshShape implements Shape;

// Constraint
interface ConstraintSettings {
	attribute boolean mEnabled;
	attribute long mNumVelocityStepsOverride;
	attribute long mNumPositionStepsOverride;
};

interface Constraint {
	void SetEnabled(boolean inEnabled);
	boolean GetEnabled();
};

// Two body constraint
interface TwoBodyConstraintSettings {
	Constraint Create([Ref] Body inBody1, [Ref] Body inBody2);
};

TwoBodyConstraintSettings implements ConstraintSettings;

interface TwoBodyConstraint {
	Body GetBody1();
	Body GetBody2();
};

TwoBodyConstraint implements Constraint;

// Fixed constraint
interface FixedConstraintSettings {
	void FixedConstraintSettings();
	
	attribute EConstraintSpace mSpace;
	attribute boolean mAutoDetectPoint;
	[Value] attribute Vec3 mPoint1;
	[Value] attribute Vec3 mAxisX1;
	[Value] attribute Vec3 mAxisY1;
	[Value] attribute Vec3 mPoint2;
	[Value] attribute Vec3 mAxisX2;
	[Value] attribute Vec3 mAxisY2;
};

FixedConstraintSettings implements TwoBodyConstraintSettings;

// Spring settings
interface SpringSettings {
	void SpringSettings();
	
	attribute ESpringMode mMode;
	attribute float mFrequency;
	attribute float mStiffness;
	attribute float mDamping;
};

// Distance constraint
interface DistanceConstraintSettings {
	void DistanceConstraintSettings();
	
	attribute EConstraintSpace mSpace;
	[Value] attribute Vec3 mPoint1;
	[Value] attribute Vec3 mPoint2;
	attribute float mMinDistance;
	attribute float mMaxDistance;
	[Value] attribute SpringSettings mLimitsSpringSettings;
};

DistanceConstraintSettings implements TwoBodyConstraintSettings;

// Point constraint
interface PointConstraintSettings {
	void PointConstraintSettings();
	
	attribute EConstraintSpace mSpace;
	[Value] attribute Vec3 mPoint1;
	[Value] attribute Vec3 mPoint2;
};

PointConstraintSettings implements TwoBodyConstraintSettings;

// Hinge constraint
interface HingeConstraintSettings {
	void HingeConstraintSettings();
	
	attribute EConstraintSpace mSpace;
	[Value] attribute Vec3 mPoint1;
	[Value] attribute Vec3 mHingeAxis1;
	[Value] attribute Vec3 mNormalAxis1;
	[Value] attribute Vec3 mPoint2;
	[Value] attribute Vec3 mHingeAxis2;
	[Value] attribute Vec3 mNormalAxis2;
	attribute float mLimitsMin;
	attribute float mLimitsMax;
	attribute float mMaxFrictionTorque;
};

HingeConstraintSettings implements TwoBodyConstraintSettings;

// Cone constraint
interface ConeConstraintSettings {
	void ConeConstraintSettings();
	
	attribute EConstraintSpace mSpace;
	[Value] attribute Vec3 mPoint1;
	[Value] attribute Vec3 mTwistAxis1;
	[Value] attribute Vec3 mPoint2;
	[Value] attribute Vec3 mTwistAxis2;
	attribute float mHalfConeAngle;
};

ConeConstraintSettings implements TwoBodyConstraintSettings;

// Slider constraint
interface SliderConstraintSettings {
	void SliderConstraintSettings();
	
	attribute EConstraintSpace mSpace;
	attribute boolean mAutoDetectPoint;
	[Value] attribute Vec3 mPoint1;
	[Value] attribute Vec3 mSliderAxis1;
	[Value] attribute Vec3 mNormalAxis1;
	[Value] attribute Vec3 mPoint2;
	[Value] attribute Vec3 mSliderAxis2;
	[Value] attribute Vec3 mNormalAxis2;
	attribute float mLimitsMin;
	attribute float mLimitsMax;
	attribute float mMaxFrictionForce;
};

SliderConstraintSettings implements TwoBodyConstraintSettings;

// Swing twist constraint
interface SwingTwistConstraintSettings {
	void SwingTwistConstraintSettings();
	
	attribute EConstraintSpace mSpace;
	[Value] attribute Vec3 mPosition1;
	[Value] attribute Vec3 mTwistAxis1;
	[Value] attribute Vec3 mPlaneAxis1;
	[Value] attribute Vec3 mPosition2;
	[Value] attribute Vec3 mTwistAxis2;
	[Value] attribute Vec3 mPlaneAxis2;
	attribute float mNormalHalfConeAngle;
	attribute float mPlaneHalfConeAngle;
	attribute float mTwistMinAngle;
	attribute float mTwistMaxAngle;
	attribute float mMaxFrictionTorque;
};

SwingTwistConstraintSettings implements TwoBodyConstraintSettings;

interface BodyID {
	void BodyID();
	void BodyID([Const, Ref] BodyID inID);
	unsigned long GetIndex();
	unsigned long GetIndexAndSequenceNumber();
};

interface SubShapeID {
	[Const] long GetValue();
	void SetValue(long inValue);
};

interface MotionProperties {
	EMotionQuality GetMotionQuality();
	[Value] Vec3 GetLinearVelocity();
	void SetLinearVelocity([Const, Ref] Vec3 inVelocity);
	void SetLinearVelocityClamped([Const, Ref] Vec3 inVelocity);
	[Value] Vec3 GetAngularVelocity();
	void SetAngularVelocity([Const, Ref] Vec3 inVelocity);
	void SetAngularVelocityClamped([Const, Ref] Vec3 inVelocity);
	void MoveKinematic([Const, Ref] Vec3 inPosition, [Const, Ref] Quat inRotation, float inDeltaTime);
	float GetMaxLinearVelocity();
	void SetMaxLinearVelocity(float inVelocity);
	float GetMaxAngularVelocity();
	void SetMaxAngularVelocity(float inVelocity);
	float GetLinearDamping();
	void SetLinearDamping(float inDamping);	
	float GetAngularDamping();
	void SetAngularDamping(float inDamping);
	float GetInverseMass();
	void SetInverseMass(float inInvM);
	[Value] Vec3 GetInverseInertiaDiagonal();
	[Value] Quat GetInertiaRotation();
	void SetInverseInertia([Const, Ref] Vec3 inInvI, [Const, Ref] Quat inRotation);
};

interface GroupFilter {
};

[JSImplementation="GroupFilter"]
interface GroupFilterJS {
	void GroupFilterJS();
	[Const] boolean CanCollide([Const, Ref] CollisionGroup inGroup1, [Const, Ref] CollisionGroup inGroup2);
};

interface GroupFilterTable {
	void GroupFilterTable(unsigned long inNumGroups);
	void DisableCollision(unsigned long inSubGroup1, unsigned long inSubGroup2);
	void EnableCollision(unsigned long inSubGroup1, unsigned long inSubGroup2);
	boolean IsCollisionEnabled(unsigned long inSubGroup1, unsigned long inSubGroup2);
};

GroupFilterTable implements GroupFilter;

interface CollisionGroup {
	void CollisionGroup();
	void CollisionGroup(GroupFilter inFilter, unsigned long inGroupID, unsigned long inSubGroupID);
	void SetGroupFilter(GroupFilter inFilter);
	[Const] GroupFilter GetGroupFilter();
	void SetGroupID(unsigned long inGroupID);
	unsigned long GetGroupID();
	void SetSubGroupID(unsigned long inSubGroupID);
	void GetSubGroupID();
};

interface Body {
	[Value] BodyID GetID();
	boolean IsActive();
	boolean IsStatic();
	boolean IsKinematic();
	boolean IsDynamic();
	boolean CanBeKinematicOrDynamic();
	EBodyType GetBodyType();
	EMotionType GetMotionType();
	void SetMotionType(EMotionType inMotionType);
	void SetIsSensor(boolean inIsSensor);
	boolean IsSensor();
	unsigned short GetObjectLayer();
	[Ref] CollisionGroup GetCollisionGroup();
	boolean GetAllowSleeping();
	void SetAllowSleeping(boolean inAllow);
	float GetFriction();
	void SetFriction(float inFriction);
	float GetRestitution();
	void SetRestitution(float inRestitution);
	[Value] Vec3 GetLinearVelocity();
	void SetLinearVelocity([Const, Ref] Vec3 inVelocity);
	void SetLinearVelocityClamped([Const, Ref] Vec3 inVelocity);
	[Value] Vec3 GetAngularVelocity();
	void SetAngularVelocity([Const, Ref] Vec3 inVelocity);
	void SetAngularVelocityClamped([Const, Ref] Vec3 inVelocity);
	void AddForce([Const, Ref] Vec3 inForce);
	void AddForce([Const, Ref] Vec3 inForce, [Const, Ref] Vec3 inPosition);
	void AddTorque([Const, Ref] Vec3 inTorque);
	void AddImpulse([Const, Ref] Vec3 inImpulse);
	void AddImpulse([Const, Ref] Vec3 inImpulse, [Const, Ref] Vec3 inPosition);
	void MoveKinematic([Const, Ref] Vec3 inPosition, [Const, Ref] Quat inRotation, float inDeltaTime);
	boolean IsInBroadPhase();
	[Const] Shape GetShape();
	[Value] Vec3 GetPosition();
	[Value] Quat GetRotation();
	[Value] Mat44 GetWorldTransform();
	[Value] Vec3 GetCenterOfMassPosition();
	[Value] Mat44 GetCenterOfMassTransform();
	[Value] AABox GetWorldSpaceBounds();
	[Value] TransformedShape GetTransformedShape();
	MotionProperties GetMotionProperties();
};

interface BodyInterface {
	Body CreateBody([Const, Ref] BodyCreationSettings inSettings);
	Body CreateSoftBody([Const, Ref] SoftBodyCreationSettings inSettings);
	void DestroyBody([Const, Ref] BodyID inBodyID);
	void AddBody([Const, Ref] BodyID inBodyID, EActivation inActivationMode);
	void RemoveBody([Const, Ref] BodyID inBodyID);
	boolean IsAdded([Const, Ref] BodyID inBodyID);
	[Value] BodyID CreateAndAddBody([Const, Ref] BodyCreationSettings inSettings, EActivation inActivationMode);
	[Value] BodyID CreateAndAddSoftBody([Const, Ref] SoftBodyCreationSettings inSettings, EActivation inActivationMode);
	[Const] Shape GetShape([Const, Ref] BodyID inBodyID);
	void SetShape([Const, Ref] BodyID inBodyID, [Const] Shape inShape, boolean inUpdateMassProperties, EActivation inActivationMode);
	void SetObjectLayer([Const, Ref] BodyID inBodyID, unsigned short inLayer);
	unsigned short GetObjectLayer([Const, Ref] BodyID inBodyID);
	void SetPositionAndRotation([Const, Ref] BodyID inBodyID, [Const, Ref] Vec3 inPosition, [Const, Ref] Quat inRotation, EActivation inActivationMode);
	void SetPositionAndRotationWhenChanged([Const, Ref] BodyID inBodyID, [Const, Ref] Vec3 inPosition, [Const, Ref] Quat inRotation, EActivation inActivationMode);
	void GetPositionAndRotation([Const, Ref] BodyID inBodyID, [Ref] Vec3 outPosition, [Ref] Quat outRotation);
	void SetPosition([Const, Ref] BodyID inBodyID, [Const, Ref] Vec3 inPosition, EActivation inActivationMode);
	[Value] Vec3 GetPosition([Const, Ref] BodyID inBodyID);
	void SetRotation([Const, Ref] BodyID inBodyID, [Const, Ref] Quat inRotation, EActivation inActivationMode);
	[Value] Quat GetRotation([Const, Ref] BodyID inBodyID);
	void MoveKinematic([Const, Ref] BodyID inBodyID, [Const, Ref] Vec3 inPosition, [Const, Ref] Quat inRotation, float inDeltaTime);
	void ActivateBody([Const, Ref] BodyID inBodyID);
	void DeactivateBody([Const, Ref] BodyID inBodyID);
	boolean IsActive([Const, Ref] BodyID inBodyID);
	void SetMotionType([Const, Ref] BodyID inBodyID, EMotionType inMotionType, EActivation inActivationMode);
	void SetMotionQuality([Const, Ref] BodyID inBodyID, EMotionQuality inMotionQuality);
	void AddImpulse([Const, Ref] BodyID inBodyID, [Const, Ref] Vec3 inImpulse);
	void AddImpulse([Const, Ref] BodyID inBodyID, [Const, Ref] Vec3 inImpulse, [Const, Ref] Vec3 inPosition);
	void AddAngularImpulse([Const, Ref] BodyID inBodyID, [Const, Ref] Vec3 inAngularImpulse);
	[Value] TransformedShape GetTransformedShape([Const, Ref] BodyID inBodyID);
};

interface StateRecorder {
	void SetValidating(boolean inValidating);
	boolean	IsValidating();
};

interface StateRecorderImpl {
	void StateRecorderImpl();
	void Clear();
	void Rewind();
	boolean	IsEqual([Ref] StateRecorderImpl inReference);
};

StateRecorderImpl implements StateRecorder;

interface BodyLockInterface {
	Body TryGetBody([Const, Ref] BodyID inBodyID);
};

interface BodyLockInterfaceNoLock {
};

BodyLockInterfaceNoLock implements BodyLockInterface;

interface BodyLockInterfaceLocking {
};

BodyLockInterfaceLocking implements BodyLockInterface;

interface PhysicsSettings {
	attribute long mMaxInFlightBodyPairs;
	attribute long mStepListenersBatchSize;
	attribute long mStepListenerBatchesPerJob;
	attribute float mBaumgarte;
	attribute float mSpeculativeContactDistance;
	attribute float mPenetrationSlop;
	attribute float mLinearCastThreshold;
	attribute float mLinearCastMaxPenetration;
	attribute float mManifoldToleranceSq;
	attribute float mMaxPenetrationDistance;
	attribute float mBodyPairCacheMaxDeltaPositionSq;
	attribute float mBodyPairCacheCosMaxDeltaRotationDiv2;
	attribute float mContactNormalCosMaxDeltaRotation;
	attribute float mContactPointPreserveLambdaMaxDistSq;
	attribute long mNumVelocitySteps;
	attribute long mNumPositionSteps;
	attribute float mMinVelocityForRestitution;
	attribute float mTimeBeforeSleep;
	attribute float mPointVelocitySleepThreshold;
	attribute boolean mDeterministicSimulation;
	attribute boolean mConstraintWarmStart;
	attribute boolean mUseBodyPairContactCache;
	attribute boolean mUseManifoldReduction;
	attribute boolean mUseLargeIslandSplitter;
	attribute boolean mAllowSleeping;
	attribute boolean mCheckActiveEdges;
};

interface CollideShapeResultFace {
	long size();
	[Ref] Vec3 at(long inIndex);
	void push_back([Const, Ref] Vec3 inValue);
	void resize(unsigned long inSize);
};

interface CollideShapeResult {
	[Value] attribute Vec3 mContactPointOn1;
	[Value] attribute Vec3 mContactPointOn2;
	[Value] attribute Vec3 mPenetrationAxis;
	attribute float mPenetrationDepth;
	[Value] attribute SubShapeID mSubShapeID1;
	[Value] attribute SubShapeID mSubShapeID2;
	[Value] attribute BodyID mBodyID2;
	[Value] attribute CollideShapeResultFace mShape1Face;
	[Value] attribute CollideShapeResultFace mShape2Face;
};

interface ContactPoints {
	long size();
	[Ref] Vec3 at(long inIndex);
	void push_back([Const, Ref] Vec3 inValue);
	void resize(unsigned long inSize);
};

interface ContactManifold {
	[Value] ContactManifold SwapShapes();
	[Value] Vec3 GetWorldSpaceContactPointOn1(unsigned long inIndex);
	[Value] Vec3 GetWorldSpaceContactPointOn2(unsigned long inIndex);

	[Value] attribute Vec3 mBaseOffset;
	[Value] attribute Vec3 mWorldSpaceNormal;
	attribute float mPenetrationDepth;
	[Value] attribute SubShapeID mSubShapeID1;
	[Value] attribute SubShapeID mSubShapeID2;
	[Value] attribute ContactPoints mRelativeContactPointsOn1;
	[Value] attribute ContactPoints mRelativeContactPointsOn2;
};

interface ContactSettings {
	attribute float mCombinedFriction;
	attribute float mCombinedRestitution;
	attribute float mInvMassScale1;
	attribute float mInvInertiaScale1;
	attribute float mInvMassScale2;
	attribute float mInvInertiaScale2;
	attribute boolean mIsSensor;
	[Value] attribute Vec3 mRelativeLinearSurfaceVelocity;
	[Value] attribute Vec3 mRelativeAngularSurfaceVelocity;
};

interface SubShapeIDPair {
	[Value] BodyID GetBody1ID();
	[Value] SubShapeID GetSubShapeID1();
	[Value] BodyID GetBody2ID();
	[Value] SubShapeID GetSubShapeID2();
};

interface ContactListener {
};

interface ContactListenerEm {
};

ContactListenerEm implements ContactListener;

[JSImplementation="ContactListenerEm"]
interface ContactListenerJS {
	void ContactListenerJS();
	long OnContactValidate([Const, Ref] Body inBody1, [Const, Ref] Body inBody2, [Const] Vec3 inBaseOffset, [Const, Ref] CollideShapeResult inCollisionResult); // Return value ValidateResult doesn't work with emscripten
	void OnContactAdded([Const, Ref] Body inBody1, [Const, Ref] Body inBody2, [Const, Ref] ContactManifold inManifold, [Ref] ContactSettings ioSettings);
	void OnContactPersisted([Const, Ref] Body inBody1, [Const, Ref] Body inBody2, [Const, Ref] ContactManifold inManifold, [Ref] ContactSettings ioSettings);
	void OnContactRemoved([Const, Ref] SubShapeIDPair inSubShapePair);
};

interface RayCastBodyCollector {
	void Reset();
	void SetContext([Const] TransformedShape inContext);
	[Const] TransformedShape GetContext();
	void UpdateEarlyOutFraction(float inFraction);
	void ResetEarlyOutFraction(float inFraction);
	void ForceEarlyOut();
	boolean ShouldEarlyOut();
	float GetEarlyOutFraction();
	float GetPositiveEarlyOutFraction();
};

[JSImplementation="RayCastBodyCollector"]
interface RayCastBodyCollectorJS {
	void RayCastBodyCollectorJS();
	void Reset();
	void AddHit([Const, Ref] BroadPhaseCastResult inResult);
};

interface CollideShapeBodyCollector {
	void Reset();
	void SetContext([Const] TransformedShape inContext);
	[Const] TransformedShape GetContext();
	void UpdateEarlyOutFraction(float inFraction);
	void ResetEarlyOutFraction(float inFraction);
	void ForceEarlyOut();
	boolean ShouldEarlyOut();
	float GetEarlyOutFraction();
	float GetPositiveEarlyOutFraction();
};

[JSImplementation="CollideShapeBodyCollector"]
interface CollideShapeBodyCollectorJS {
	void CollideShapeBodyCollectorJS();
	void Reset();
	void AddHit([Const, Ref] BodyID inResult);
};

interface CastShapeBodyCollector {
	void Reset();
	void SetContext([Const] TransformedShape inContext);
	[Const] TransformedShape GetContext();
	void UpdateEarlyOutFraction(float inFraction);
	void ResetEarlyOutFraction(float inFraction);
	void ForceEarlyOut();
	boolean ShouldEarlyOut();
	float GetEarlyOutFraction();
	float GetPositiveEarlyOutFraction();
};

[JSImplementation="CastShapeBodyCollector"]
interface CastShapeBodyCollectorJS {
	void CastShapeBodyCollectorJS();
	void Reset();
	void AddHit([Const, Ref] BroadPhaseCastResult inResult);
};

interface BroadPhaseQuery {
	void CastRay([Const, Ref] RayCast inRay, [Ref] RayCastBodyCollector ioCollector, [Const, Ref] BroadPhaseLayerFilter inBroadPhaseFilter, [Const, Ref] ObjectLayerFilter inObjectLayerFilter);
	void CollideAABox([Const, Ref] AABox inBox, [Ref] CollideShapeBodyCollector ioCollector, [Const, Ref] BroadPhaseLayerFilter inBroadPhaseFilter, [Const, Ref] ObjectLayerFilter inObjectLayerFilter);
	void CollideSphere([Const, Ref] Vec3 inCenter, float inRadius, [Ref] CollideShapeBodyCollector ioCollector, [Const, Ref] BroadPhaseLayerFilter inBroadPhaseLayerFilter, [Const, Ref] ObjectLayerFilter inObjectLayerFilter);
	void CollidePoint([Const, Ref] Vec3 inPoint, [Ref] CollideShapeBodyCollector ioCollector, [Const, Ref] BroadPhaseLayerFilter inBroadPhaseFilter, [Const, Ref] ObjectLayerFilter inObjectLayerFilter);
	void CollideOrientedBox([Const, Ref] OrientedBox inBox, [Ref] CollideShapeBodyCollector ioCollector, [Const, Ref] BroadPhaseLayerFilter inBroadPhaseFilter, [Const, Ref] ObjectLayerFilter inObjectLayerFilter);
	void CastAABox([Const, Ref] AABoxCast inBox, [Ref] CastShapeBodyCollector ioCollector, [Const, Ref] BroadPhaseLayerFilter inBroadPhaseFilter, [Const, Ref] ObjectLayerFilter inObjectLayerFilter);
};

interface RayCastSettings {
	attribute EBackFaceMode mBackFaceMode;
	attribute boolean mTreatConvexAsSolid;
};

interface CastRayCollector {
	void Reset();
	void SetContext([Const] TransformedShape inContext);
	[Const] TransformedShape GetContext();
	void UpdateEarlyOutFraction(float inFraction);
	void ResetEarlyOutFraction(float inFraction);
	void ForceEarlyOut();
	boolean ShouldEarlyOut();
	float GetEarlyOutFraction();
	float GetPositiveEarlyOutFraction();
};

[JSImplementation="CastRayCollector"]
interface CastRayCollectorJS {
	void CastRayCollectorJS();
	void Reset();
	void OnBody([Const, Ref] Body inBody);
	void AddHit([Const, Ref] RayCastResult inResult);
};

interface CollidePointResult {
	[Value] attribute BodyID mBodyID;
	[Value] attribute SubShapeID mSubShapeID2;
};

interface CollidePointCollector {
	void Reset();
	void SetContext([Const] TransformedShape inContext);
	[Const] TransformedShape GetContext();
	void UpdateEarlyOutFraction(float inFraction);
	void ResetEarlyOutFraction(float inFraction);
	void ForceEarlyOut();
	boolean ShouldEarlyOut();
	float GetEarlyOutFraction();
	float GetPositiveEarlyOutFraction();
};

[JSImplementation="CollidePointCollector"]
interface CollidePointCollectorJS {
	void CollidePointCollectorJS();
	void Reset();
	void OnBody([Const, Ref] Body inBody);
	void AddHit([Const, Ref] CollidePointResult inResult);
};

interface CollideSettingsBase {
	attribute EActiveEdgeMode mActiveEdgeMode;
	attribute ECollectFacesMode mCollectFacesMode;
	attribute float mCollisionTolerance;
	attribute float mPenetrationTolerance;
	[Value] attribute Vec3 mActiveEdgeMovementDirection;
};

interface CollideShapeSettings {
	attribute float mMaxSeparationDistance;
	attribute EBackFaceMode mBackFaceMode;
};

CollideShapeSettings implements CollideSettingsBase;

interface CollideShapeCollector {
	void Reset();
	void SetContext([Const] TransformedShape inContext);
	[Const] TransformedShape GetContext();
	void UpdateEarlyOutFraction(float inFraction);
	void ResetEarlyOutFraction(float inFraction);
	void ForceEarlyOut();
	boolean ShouldEarlyOut();
	float GetEarlyOutFraction();
	float GetPositiveEarlyOutFraction();
};

[JSImplementation="CollideShapeCollector"]
interface CollideShapeCollectorJS {
	void CollideShapeCollectorJS();
	void Reset();
	void OnBody([Const, Ref] Body inBody);
	void AddHit([Const, Ref] CollideShapeResult inResult);
};

interface ShapeCastSettings {
	attribute EBackFaceMode mBackFaceModeTriangles;
	attribute EBackFaceMode mBackFaceModeConvex;
	attribute boolean mUseShrunkenShapeAndConvexRadius;
	attribute boolean mReturnDeepestPoint;
};

ShapeCastSettings implements CollideSettingsBase;

interface ShapeCastResult {
	attribute float mFraction;
	attribute boolean mIsBackFaceHit;
};

ShapeCastResult implements CollideShapeResult;

interface CastShapeCollector {
	void Reset();
	void SetContext([Const] TransformedShape inContext);
	[Const] TransformedShape GetContext();
	void UpdateEarlyOutFraction(float inFraction);
	void ResetEarlyOutFraction(float inFraction);
	void ForceEarlyOut();
	boolean ShouldEarlyOut();
	float GetEarlyOutFraction();
	float GetPositiveEarlyOutFraction();
};

[JSImplementation="CastShapeCollector"]
interface CastShapeCollectorJS {
	void CastShapeCollectorJS();
	void Reset();
	void OnBody([Const, Ref] Body inBody);
	void AddHit([Const, Ref] ShapeCastResult inResult);
};

interface TransformedShapeCollector {
	void Reset();
	void SetContext([Const] TransformedShape inContext);
	[Const] TransformedShape GetContext();
	void UpdateEarlyOutFraction(float inFraction);
	void ResetEarlyOutFraction(float inFraction);
	void ForceEarlyOut();
	boolean ShouldEarlyOut();
	float GetEarlyOutFraction();
	float GetPositiveEarlyOutFraction();
};

[JSImplementation="TransformedShapeCollector"]
interface TransformedShapeCollectorJS {
	void TransformedShapeCollectorJS();
	void Reset();
	void OnBody([Const, Ref] Body inBody);
	void AddHit([Const, Ref] TransformedShape inResult);
};

interface NarrowPhaseQuery {
	void CastRay([Const, Ref] RRayCast inRay, [Const, Ref] RayCastSettings inRayCastSettings, [Ref] CastRayCollector ioCollector, [Const, Ref] BroadPhaseLayerFilter inBroadPhaseLayerFilter, [Const, Ref] ObjectLayerFilter inObjectLayerFilter, [Const, Ref] BodyFilter inBodyFilter, [Const, Ref] ShapeFilter inShapeFilter);
	void CollidePoint([Const, Ref] Vec3 inPoint, [Ref] CollidePointCollector ioCollector, [Const, Ref] BroadPhaseLayerFilter inBroadPhaseLayerFilter, [Const, Ref] ObjectLayerFilter inObjectLayerFilter, [Const, Ref] BodyFilter inBodyFilter, [Const, Ref] ShapeFilter inShapeFilter);
	void CollideShape([Const] Shape inShape, [Const, Ref] Vec3 inShapeScale, [Const, Ref] Mat44 inCenterOfMassTransform, [Const, Ref] CollideShapeSettings inCollideShapeSettings, [Const, Ref] Vec3 inBaseOffset, [Ref] CollideShapeCollector ioCollector, [Const, Ref] BroadPhaseLayerFilter inBroadPhaseLayerFilter, [Const, Ref] ObjectLayerFilter inObjectLayerFilter, [Const, Ref] BodyFilter inBodyFilter, [Const, Ref] ShapeFilter inShapeFilter);
	void CastShape([Const, Ref] RShapeCast inShapeCast, [Const, Ref] ShapeCastSettings inShapeCastSettings, [Const, Ref] Vec3 inBaseOffset, [Ref] CastShapeCollector ioCollector, [Const, Ref] BroadPhaseLayerFilter inBroadPhaseLayerFilter, [Const, Ref] ObjectLayerFilter inObjectLayerFilter, [Const, Ref] BodyFilter inBodyFilter, [Const, Ref] ShapeFilter inShapeFilter);
	void CollectTransformedShapes([Const, Ref] AABox inBox, [Ref] TransformedShapeCollector ioCollector, [Const, Ref] BroadPhaseLayerFilter inBroadPhaseLayerFilter, [Const, Ref] ObjectLayerFilter inObjectLayerFilter, [Const, Ref] BodyFilter inBodyFilter, [Const, Ref] ShapeFilter inShapeFilter);
};

interface PhysicsSystem {
	void SetGravity([Const, Ref] Vec3 inGravity);
	[Value] Vec3 GetGravity();
	[Const, Value] PhysicsSettings GetPhysicsSettings();
	void SetPhysicsSettings([Const, Ref] PhysicsSettings inPhysicsSettings);
	unsigned long GetNumBodies();
	unsigned long GetNumActiveBodies(EBodyType inBodyType);
	unsigned long GetMaxBodies();
	void AddConstraint(Constraint inConstraint);
	void RemoveConstraint(Constraint inConstraint);
	void SetContactListener(ContactListener inListener);
	ContactListener GetContactListener();
	void OptimizeBroadPhase();
	[Ref] BodyInterface GetBodyInterface();
	[Ref] BodyInterface GetBodyInterfaceNoLock();
	[Const, Ref] BodyLockInterfaceNoLock GetBodyLockInterfaceNoLock();
	[Const, Ref] BodyLockInterfaceLocking GetBodyLockInterface();
	[Const, Ref] BroadPhaseQuery GetBroadPhaseQuery();
	[Const, Ref] NarrowPhaseQuery GetNarrowPhaseQuery();
	[Const, Ref] NarrowPhaseQuery GetNarrowPhaseQueryNoLock();
	void SaveState([Ref] StateRecorder inStream, optional EStateRecorderState inState = "EStateRecorderState::All");
	boolean	RestoreState([Ref] StateRecorder inStream);
};

interface MassProperties {
	void MassProperties();

	attribute float mMass;
	[Value] attribute Mat44 mInertia;
};

interface BodyCreationSettings {
	void BodyCreationSettings([Const] Shape inShape, [Ref] Vec3 inPosition, [Ref] Quat inRotation, EMotionType inMotionType, unsigned short inObjectLayer);
	
	[Value] attribute Vec3 mPosition;
	[Value] attribute Quat mRotation;
	[Value] attribute Vec3 mLinearVelocity;
	[Value] attribute Vec3 mAngularVelocity;
	attribute long long mUserData;
	attribute unsigned short mObjectLayer;
	[Value] attribute CollisionGroup mCollisionGroup;
	attribute EMotionType mMotionType;
	attribute EAllowedDOFs mAllowedDOFs;
	attribute boolean mAllowDynamicOrKinematic;
	attribute boolean mIsSensor;
	attribute EMotionQuality mMotionQuality;
	attribute boolean mAllowSleeping;
	attribute float mFriction;
	attribute float mRestitution;
	attribute float mLinearDamping;
	attribute float mAngularDamping;
	attribute float mMaxLinearVelocity;
	attribute float mMaxAngularVelocity;
	attribute float mGravityFactor;
	attribute EOverrideMassProperties mOverrideMassProperties;
	attribute float mInertiaMultiplier;
	[Value] attribute MassProperties mMassPropertiesOverride;
};

interface SoftBodySharedSettingsVertex {
	void SoftBodySharedSettingsVertex();

	[Value] attribute Float3 mPosition;
	[Value] attribute Float3 mVelocity;
	attribute float mInvMass;
};

interface SoftBodySharedSettingsFace {
	void SoftBodySharedSettingsFace(unsigned long inVertex1, unsigned long inVertex2, unsigned long inVertex3, unsigned long inMaterialIndex);

	attribute unsigned long[] mVertex;
	attribute unsigned long mMaterialIndex;
};

interface SoftBodySharedSettingsEdge {
	void SoftBodySharedSettingsEdge(unsigned long inVertex1, unsigned long inVertex2, float inCompliance);

	attribute unsigned long[] mVertex;
	attribute float mRestLength;
	attribute float mCompliance;
};

interface SoftBodySharedSettingsVolume {
	void SoftBodySharedSettingsVolume(unsigned long inVertex1, unsigned long inVertex2, unsigned long inVertex3, unsigned long inVertex4, float inCompliance);

	attribute unsigned long[] mVertex;
	attribute float mSixRestVolume;
	attribute float mCompliance;
};

interface ArraySoftBodySharedSettingsVertex {
	long size();
	[Ref] SoftBodySharedSettingsVertex at(long inIndex);
	void push_back([Const, Ref] SoftBodySharedSettingsVertex inValue);
	void reserve(unsigned long inSize);
	void resize(unsigned long inSize);
};

interface ArraySoftBodySharedSettingsFace {
	long size();
	[Ref] SoftBodySharedSettingsFace at(long inIndex);
	void push_back([Const, Ref] SoftBodySharedSettingsFace inValue);
	void reserve(unsigned long inSize);
	void resize(unsigned long inSize);
};

interface ArraySoftBodySharedSettingsEdge {
	long size();
	[Ref] SoftBodySharedSettingsEdge at(long inIndex);
	void push_back([Const, Ref] SoftBodySharedSettingsEdge inValue);
	void reserve(unsigned long inSize);
	void resize(unsigned long inSize);
};

interface ArraySoftBodySharedSettingsVolume {
	long size();
	[Ref] SoftBodySharedSettingsVolume at(long inIndex);
	void push_back([Const, Ref] SoftBodySharedSettingsVolume inValue);
	void reserve(unsigned long inSize);
	void resize(unsigned long inSize);
};

interface SoftBodySharedSettings {
	void SoftBodySharedSettings();

	void AddFace([Const, Ref] SoftBodySharedSettingsFace inFace);
	void CalculateEdgeLengths();
	void CalculateVolumeConstraintVolumes();
	void Optimize();

	[Value] attribute ArraySoftBodySharedSettingsVertex mVertices;
	[Value] attribute ArraySoftBodySharedSettingsFace mFaces;
	[Value] attribute ArraySoftBodySharedSettingsEdge mEdgeConstraints;
	[Value] attribute ArraySoftBodySharedSettingsVolume mVolumeConstraints;
	[Value] attribute PhysicsMaterialList mMaterials;
};

interface SoftBodyCreationSettings {
	void SoftBodyCreationSettings([Const] SoftBodySharedSettings inSettings, [Ref] Vec3 inPosition, [Ref] Quat inRotation, unsigned short inObjectLayer);
	
	[Value] attribute Vec3 mPosition;
	[Value] attribute Quat mRotation;
	attribute long long mUserData;
	attribute unsigned short mObjectLayer;
	[Value] attribute CollisionGroup mCollisionGroup;
	attribute unsigned long mNumIterations;
	attribute float mLinearDamping;
	attribute float mMaxLinearVelocity;
	attribute float mRestitution;
	attribute float mFriction;
	attribute float mPressure;
	attribute float mGravityFactor;
	attribute boolean mUpdatePosition;
	attribute boolean mMakeRotationIdentity;
};

interface CharacterBaseSettings {
	[Value] attribute Vec3 mUp;
	[Value] attribute Plane mSupportingVolume;
	attribute float mMaxSlopeAngle;
	[Const] attribute Shape mShape;
};

interface CharacterVirtualSettings {
	void CharacterVirtualSettings();
	
	attribute float mMass;
	attribute float mMaxStrength;
	[Value] attribute Vec3 mShapeOffset;
	attribute EBackFaceMode mBackFaceMode;
	attribute float mPredictiveContactDistance;
	attribute unsigned long mMaxCollisionIterations;
	attribute unsigned long mMaxConstraintIterations;
	attribute float mMinTimeRemaining;
	attribute float mCollisionTolerance;
	attribute float mCharacterPadding;
	attribute unsigned long mMaxNumHits;
	attribute float mHitReductionCosMaxAngle;
	attribute float mPenetrationRecoverySpeed;
};

CharacterVirtualSettings implements CharacterBaseSettings;

interface CharacterContactSettings
{
	attribute boolean mCanPushCharacter;
	attribute boolean mCanReceiveImpulses;
};

interface CharacterContactListener {
};

interface CharacterContactListenerEm {
};

CharacterContactListenerEm implements CharacterContactListener;

[JSImplementation="CharacterContactListenerEm"]
interface CharacterContactListenerJS {
	void CharacterContactListenerJS();
	void OnAdjustBodyVelocity([Const] CharacterVirtual inCharacter, [Const, Ref] Body inBody2, [Ref] Vec3 ioLinearVelocity, [Ref] Vec3 ioAngularVelocity);
	boolean OnContactValidate([Const] CharacterVirtual inCharacter, [Const, Ref] BodyID inBodyID2, [Const, Ref] SubShapeID inSubShapeID2);
	void OnContactAdded([Const] CharacterVirtual inCharacter, [Const, Ref] BodyID inBodyID2, [Const, Ref] SubShapeID inSubShapeID2, Vec3 inContactPosition, Vec3 inContactNormal, [Ref] CharacterContactSettings ioSettings);
	void OnContactSolve([Const] CharacterVirtual inCharacter, [Const, Ref] BodyID inBodyID2, [Const, Ref] SubShapeID inSubShapeID2, Vec3 inContactPosition, Vec3 inContactNormal, Vec3 inContactVelocity, [Const] PhysicsMaterial inContactMaterial, Vec3 inCharacterVelocity, [Ref] Vec3 ioNewCharacterVelocity);
};

[Prefix="CharacterVirtual::"]
interface ExtendedUpdateSettings {
	void ExtendedUpdateSettings();
	
	[Value] attribute Vec3 mStickToFloorStepDown;
	[Value] attribute Vec3 mWalkStairsStepUp;
	attribute float mWalkStairsMinStepForward;
	attribute float mWalkStairsStepForwardTest;
	attribute float mWalkStairsCosAngleForwardContact;
	[Value] attribute Vec3 mWalkStairsStepDownExtra;
};

interface TempAllocator {
};

interface BroadPhaseLayerFilter {
};

interface ObjectVsBroadPhaseLayerFilter {
};

interface DefaultBroadPhaseLayerFilter {
	void DefaultBroadPhaseLayerFilter([Const, Ref] ObjectVsBroadPhaseLayerFilter inFilter, unsigned short inObjectLayer);
};

DefaultBroadPhaseLayerFilter implements ObjectLayerFilter;

interface ObjectLayerFilter {
};

[JSImplementation="ObjectLayerFilter"]
interface ObjectLayerFilterJS {
	void ObjectLayerFilterJS();
	[Const] boolean ShouldCollide(unsigned short inLayer);
};

interface ObjectLayerPairFilter {
};

[JSImplementation="ObjectLayerPairFilter"]
interface ObjectLayerPairFilterJS {
	void ObjectLayerPairFilterJS();
	[Const] boolean ShouldCollide(unsigned short inLayer1, unsigned short inLayer2);
};

interface DefaultObjectLayerFilter {
	void DefaultObjectLayerFilter([Const, Ref] ObjectLayerPairFilter inFilter, unsigned short inObjectLayer);
};

DefaultObjectLayerFilter implements ObjectLayerFilter;

interface SpecifiedObjectLayerFilter {
	void SpecifiedObjectLayerFilter(unsigned short inObjectLayer);
};

SpecifiedObjectLayerFilter implements ObjectLayerFilter;

interface BodyFilter {
	void BodyFilter();
};

[JSImplementation="BodyFilter"]
interface BodyFilterJS {
	void BodyFilterJS();
	[Const] boolean ShouldCollide([Const, Ref] BodyID inBodyID);
	[Const] boolean ShouldCollideLocked([Const, Ref] Body inBody);
};

interface IgnoreSingleBodyFilter {
	void IgnoreSingleBodyFilter([Const, Ref] BodyID inBodyID);
};

IgnoreSingleBodyFilter implements BodyFilter;

interface IgnoreMultipleBodiesFilter {
	void Clear();
	void Reserve(unsigned long inSize);
	void IgnoreBody([Const, Ref] BodyID inBodyID);
};

IgnoreMultipleBodiesFilter implements BodyFilter;

interface ShapeFilter {
	void ShapeFilter();
};

[JSImplementation="ShapeFilter"]
interface ShapeFilterJS {
	void ShapeFilterJS();
	[Const] boolean ShouldCollide([Const] Shape inShape2, [Const, Ref] SubShapeID inSubShapeIDOfShape2);
};

[JSImplementation="ShapeFilter"]
interface ShapeFilterJS2 {
	void ShapeFilterJS2();
	[Const] boolean ShouldCollide([Const] Shape inShape1, [Const, Ref] SubShapeID inSubShapeIDOfShape1, [Const] Shape inShape2, [Const, Ref] SubShapeID inSubShapeIDOfShape2);
};

interface CharacterBase {
	void SetMaxSlopeAngle(float inMaxSlopeAngle);
	float GetCosMaxSlopeAngle();
	void SetUp([Const, Ref] Vec3 inUp);
	[Value] Vec3 GetUp();
	[Const] Shape GetShape();
	EGroundState GetGroundState();
	boolean IsSlopeTooSteep([Ref] Vec3 inNormal);
	boolean IsSupported();
	[Value] Vec3 GetGroundPosition();
	[Value] Vec3 GetGroundNormal();
	[Value] Vec3 GetGroundVelocity();
	[Const] PhysicsMaterial GetGroundMaterial();
	[Value] BodyID GetGroundBodyID();
};

interface CharacterVirtual {
	void CharacterVirtual([Const] CharacterVirtualSettings inSettings, [Ref] Vec3 inPosition, [Ref] Quat inRotation, PhysicsSystem inSystem);
	void SetListener(CharacterContactListener inListener);
	CharacterContactListener GetListener();
	[Value] Vec3 GetLinearVelocity();
	void SetLinearVelocity([Const, Ref] Vec3 inLinearVelocity);
	[Value] Vec3 GetPosition();
	void SetPosition([Const, Ref] Vec3 inPosition);
	[Value] Quat GetRotation();
	void SetRotation([Const, Ref] Quat inRotation);
	[Value] Mat44 GetWorldTransform();
	[Value] Mat44 GetCenterOfMassTransform();
	float GetMass();
	void SetMass(float inMass);
	float GetMaxStrength();
	void SetMaxStrength(float inMaxStrength);
	float GetPenetrationRecoverySpeed();
	void SetPenetrationRecoverySpeed(float inSpeed);
	float GetCharacterPadding();
	unsigned long GetMaxNumHits();
	void SetMaxNumHits(unsigned long inMaxHits);
	float GetHitReductionCosMaxAngle();
	void SetHitReductionCosMaxAngle(float inCosMaxAngle);
	boolean GetMaxHitsExceeded();
	[Value] Vec3 GetShapeOffset();
	void SetShapeOffset([Const, Ref] Vec3 inShapeOffset);
	[Value] Vec3 CancelVelocityTowardsSteepSlopes([Const, Ref] Vec3 inDesiredVelocity);
	void Update(float inDeltaTime, [Const, Ref] Vec3 inGravity, [Const, Ref] BroadPhaseLayerFilter inBroadPhaseLayerFilter, [Const, Ref] ObjectLayerFilter inObjectLayerFilter, [Const, Ref] BodyFilter inBodyFilter, [Const, Ref] ShapeFilter inShapeFilter, [Ref] TempAllocator inAllocator);
	boolean CanWalkStairs([Const, Ref] Vec3 inLinearVelocity);
	boolean WalkStairs(float inDeltaTime, [Const, Ref] Vec3 inStepUp, [Const, Ref] Vec3 inStepForward, [Const, Ref] Vec3 inStepForwardTest, [Const, Ref] Vec3 inStepDownExtra, [Const, Ref] BroadPhaseLayerFilter inBroadPhaseLayerFilter, [Const, Ref] ObjectLayerFilter inObjectLayerFilter, [Const, Ref] BodyFilter inBodyFilter, [Const, Ref] ShapeFilter inShapeFilter, [Ref] TempAllocator inAllocator);
	boolean StickToFloor([Const, Ref] Vec3 inStepDown, [Const, Ref] BroadPhaseLayerFilter inBroadPhaseLayerFilter, [Const, Ref] ObjectLayerFilter inObjectLayerFilter, [Const, Ref] BodyFilter inBodyFilter, [Const, Ref] ShapeFilter inShapeFilter, [Ref] TempAllocator inAllocator);
	void ExtendedUpdate(float inDeltaTime, [Const, Ref] Vec3 inGravity, [Const, Ref] ExtendedUpdateSettings inSettings, [Const, Ref] BroadPhaseLayerFilter inBroadPhaseLayerFilter, [Const, Ref] ObjectLayerFilter inObjectLayerFilter, [Const, Ref] BodyFilter inBodyFilter, [Const, Ref] ShapeFilter inShapeFilter, [Ref] TempAllocator inAllocator);
	void RefreshContacts([Const, Ref] BroadPhaseLayerFilter inBroadPhaseLayerFilter, [Const, Ref] ObjectLayerFilter inObjectLayerFilter, [Const, Ref] BodyFilter inBodyFilter, [Const, Ref] ShapeFilter inShapeFilter, [Ref] TempAllocator inAllocator);
	void UpdateGroundVelocity();
	boolean SetShape([Const] Shape inShape, float inMaxPenetrationDepth, [Const, Ref] BroadPhaseLayerFilter inBroadPhaseLayerFilter, [Const, Ref] ObjectLayerFilter inObjectLayerFilter, [Const, Ref] BodyFilter inBodyFilter, [Const, Ref] ShapeFilter inShapeFilter, [Ref] TempAllocator inAllocator);
};

CharacterVirtual implements CharacterBase;

interface JoltSettings {
	void JoltSettings();

	attribute unsigned long mMaxBodies;
	attribute unsigned long mMaxBodyPairs;
	attribute unsigned long mMaxContactConstraints;
};

interface JoltInterface {
	void JoltInterface([Const, Ref] JoltSettings inSettings);
	void Step(float inDeltaTime, long inCollisionSteps);
	PhysicsSystem GetPhysicsSystem();
	TempAllocator GetTempAllocator();
	ObjectLayerPairFilter GetObjectLayerPairFilter();
	ObjectVsBroadPhaseLayerFilter GetObjectVsBroadPhaseLayerFilter();
};
